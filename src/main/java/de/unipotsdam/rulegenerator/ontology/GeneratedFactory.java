package de.unipotsdam.rulegenerator.ontology;

import de.unipotsdam.rulegenerator.ontology.impl.*;

import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: GeneratedFactory<br>
 * @version generated on Fri Oct 24 10:22:17 CEST 2014 by tobias
 */
public class GeneratedFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    protected FactoryHelper delegate;
    private CodeGenerationInference inference;

    public GeneratedFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public GeneratedFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#AppointmentDetailContextParameter
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#AppointmentDetailContextParameter", AppointmentDetailContextParameter.class, DefaultAppointmentDetailContextParameter.class);
    }

    /**
     * Creates an instance of type AppointmentDetailContextParameter.  Modifies the underlying ontology.
     */
    public AppointmentDetailContextParameter createAppointmentDetailContextParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_APPOINTMENTDETAILCONTEXTPARAMETER, DefaultAppointmentDetailContextParameter.class);
    }

    /**
     * Gets an instance of type AppointmentDetailContextParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AppointmentDetailContextParameter getAppointmentDetailContextParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_APPOINTMENTDETAILCONTEXTPARAMETER, DefaultAppointmentDetailContextParameter.class);
    }

    /**
     * Gets all instances of AppointmentDetailContextParameter from the ontology.
     */
    public Collection<? extends AppointmentDetailContextParameter> getAllAppointmentDetailContextParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_APPOINTMENTDETAILCONTEXTPARAMETER, DefaultAppointmentDetailContextParameter.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#AudioOutputAvailableMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#AudioOutputAvailableMeasurableInformation", AudioOutputAvailableMeasurableInformation.class, DefaultAudioOutputAvailableMeasurableInformation.class);
    }

    /**
     * Creates an instance of type AudioOutputAvailableMeasurableInformation.  Modifies the underlying ontology.
     */
    public AudioOutputAvailableMeasurableInformation createAudioOutputAvailableMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AUDIOOUTPUTAVAILABLEMEASURABLEINFORMATION, DefaultAudioOutputAvailableMeasurableInformation.class);
    }

    /**
     * Gets an instance of type AudioOutputAvailableMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AudioOutputAvailableMeasurableInformation getAudioOutputAvailableMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AUDIOOUTPUTAVAILABLEMEASURABLEINFORMATION, DefaultAudioOutputAvailableMeasurableInformation.class);
    }

    /**
     * Gets all instances of AudioOutputAvailableMeasurableInformation from the ontology.
     */
    public Collection<? extends AudioOutputAvailableMeasurableInformation> getAllAudioOutputAvailableMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AUDIOOUTPUTAVAILABLEMEASURABLEINFORMATION, DefaultAudioOutputAvailableMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#Constraint
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#Constraint", Constraint.class, DefaultConstraint.class);
    }

    /**
     * Creates an instance of type Constraint.  Modifies the underlying ontology.
     */
    public Constraint createConstraint(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONSTRAINT, DefaultConstraint.class);
    }

    /**
     * Gets an instance of type Constraint with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Constraint getConstraint(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONSTRAINT, DefaultConstraint.class);
    }

    /**
     * Gets all instances of Constraint from the ontology.
     */
    public Collection<? extends Constraint> getAllConstraintInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONSTRAINT, DefaultConstraint.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ConstraintRequirement
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ConstraintRequirement", ConstraintRequirement.class, DefaultConstraintRequirement.class);
    }

    /**
     * Creates an instance of type ConstraintRequirement.  Modifies the underlying ontology.
     */
    public ConstraintRequirement createConstraintRequirement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONSTRAINTREQUIREMENT, DefaultConstraintRequirement.class);
    }

    /**
     * Gets an instance of type ConstraintRequirement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ConstraintRequirement getConstraintRequirement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONSTRAINTREQUIREMENT, DefaultConstraintRequirement.class);
    }

    /**
     * Gets all instances of ConstraintRequirement from the ontology.
     */
    public Collection<? extends ConstraintRequirement> getAllConstraintRequirementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONSTRAINTREQUIREMENT, DefaultConstraintRequirement.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ContextClass
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ContextClass", ContextClass.class, DefaultContextClass.class);
    }

    /**
     * Creates an instance of type ContextClass.  Modifies the underlying ontology.
     */
    public ContextClass createContextClass(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONTEXTCLASS, DefaultContextClass.class);
    }

    /**
     * Gets an instance of type ContextClass with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ContextClass getContextClass(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONTEXTCLASS, DefaultContextClass.class);
    }

    /**
     * Gets all instances of ContextClass from the ontology.
     */
    public Collection<? extends ContextClass> getAllContextClassInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONTEXTCLASS, DefaultContextClass.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ContextInformation", ContextInformation.class, DefaultContextInformation.class);
    }

    /**
     * Creates an instance of type ContextInformation.  Modifies the underlying ontology.
     */
    public ContextInformation createContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONTEXTINFORMATION, DefaultContextInformation.class);
    }

    /**
     * Gets an instance of type ContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ContextInformation getContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONTEXTINFORMATION, DefaultContextInformation.class);
    }

    /**
     * Gets all instances of ContextInformation from the ontology.
     */
    public Collection<? extends ContextInformation> getAllContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONTEXTINFORMATION, DefaultContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ContextInformationConstraintRequirement
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ContextInformationConstraintRequirement", ContextInformationConstraintRequirement.class, DefaultContextInformationConstraintRequirement.class);
    }

    /**
     * Creates an instance of type ContextInformationConstraintRequirement.  Modifies the underlying ontology.
     */
    public ContextInformationConstraintRequirement createContextInformationConstraintRequirement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONTEXTINFORMATIONCONSTRAINTREQUIREMENT, DefaultContextInformationConstraintRequirement.class);
    }

    /**
     * Gets an instance of type ContextInformationConstraintRequirement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ContextInformationConstraintRequirement getContextInformationConstraintRequirement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONTEXTINFORMATIONCONSTRAINTREQUIREMENT, DefaultContextInformationConstraintRequirement.class);
    }

    /**
     * Gets all instances of ContextInformationConstraintRequirement from the ontology.
     */
    public Collection<? extends ContextInformationConstraintRequirement> getAllContextInformationConstraintRequirementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONTEXTINFORMATIONCONSTRAINTREQUIREMENT, DefaultContextInformationConstraintRequirement.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ContextInformationParameter
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ContextInformationParameter", ContextInformationParameter.class, DefaultContextInformationParameter.class);
    }

    /**
     * Creates an instance of type ContextInformationParameter.  Modifies the underlying ontology.
     */
    public ContextInformationParameter createContextInformationParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONTEXTINFORMATIONPARAMETER, DefaultContextInformationParameter.class);
    }

    /**
     * Gets an instance of type ContextInformationParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ContextInformationParameter getContextInformationParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONTEXTINFORMATIONPARAMETER, DefaultContextInformationParameter.class);
    }

    /**
     * Gets all instances of ContextInformationParameter from the ontology.
     */
    public Collection<? extends ContextInformationParameter> getAllContextInformationParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONTEXTINFORMATIONPARAMETER, DefaultContextInformationParameter.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#CurrentAirPressureMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#CurrentAirPressureMeasurableInformation", CurrentAirPressureMeasurableInformation.class, DefaultCurrentAirPressureMeasurableInformation.class);
    }

    /**
     * Creates an instance of type CurrentAirPressureMeasurableInformation.  Modifies the underlying ontology.
     */
    public CurrentAirPressureMeasurableInformation createCurrentAirPressureMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CURRENTAIRPRESSUREMEASURABLEINFORMATION, DefaultCurrentAirPressureMeasurableInformation.class);
    }

    /**
     * Gets an instance of type CurrentAirPressureMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CurrentAirPressureMeasurableInformation getCurrentAirPressureMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CURRENTAIRPRESSUREMEASURABLEINFORMATION, DefaultCurrentAirPressureMeasurableInformation.class);
    }

    /**
     * Gets all instances of CurrentAirPressureMeasurableInformation from the ontology.
     */
    public Collection<? extends CurrentAirPressureMeasurableInformation> getAllCurrentAirPressureMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CURRENTAIRPRESSUREMEASURABLEINFORMATION, DefaultCurrentAirPressureMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#CurrentAmbientNoiseMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#CurrentAmbientNoiseMeasurableInformation", CurrentAmbientNoiseMeasurableInformation.class, DefaultCurrentAmbientNoiseMeasurableInformation.class);
    }

    /**
     * Creates an instance of type CurrentAmbientNoiseMeasurableInformation.  Modifies the underlying ontology.
     */
    public CurrentAmbientNoiseMeasurableInformation createCurrentAmbientNoiseMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CURRENTAMBIENTNOISEMEASURABLEINFORMATION, DefaultCurrentAmbientNoiseMeasurableInformation.class);
    }

    /**
     * Gets an instance of type CurrentAmbientNoiseMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CurrentAmbientNoiseMeasurableInformation getCurrentAmbientNoiseMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CURRENTAMBIENTNOISEMEASURABLEINFORMATION, DefaultCurrentAmbientNoiseMeasurableInformation.class);
    }

    /**
     * Gets all instances of CurrentAmbientNoiseMeasurableInformation from the ontology.
     */
    public Collection<? extends CurrentAmbientNoiseMeasurableInformation> getAllCurrentAmbientNoiseMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CURRENTAMBIENTNOISEMEASURABLEINFORMATION, DefaultCurrentAmbientNoiseMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#CurrentAppointmentMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#CurrentAppointmentMeasurableInformation", CurrentAppointmentMeasurableInformation.class, DefaultCurrentAppointmentMeasurableInformation.class);
    }

    /**
     * Creates an instance of type CurrentAppointmentMeasurableInformation.  Modifies the underlying ontology.
     */
    public CurrentAppointmentMeasurableInformation createCurrentAppointmentMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CURRENTAPPOINTMENTMEASURABLEINFORMATION, DefaultCurrentAppointmentMeasurableInformation.class);
    }

    /**
     * Gets an instance of type CurrentAppointmentMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CurrentAppointmentMeasurableInformation getCurrentAppointmentMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CURRENTAPPOINTMENTMEASURABLEINFORMATION, DefaultCurrentAppointmentMeasurableInformation.class);
    }

    /**
     * Gets all instances of CurrentAppointmentMeasurableInformation from the ontology.
     */
    public Collection<? extends CurrentAppointmentMeasurableInformation> getAllCurrentAppointmentMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CURRENTAPPOINTMENTMEASURABLEINFORMATION, DefaultCurrentAppointmentMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#CurrentHumidityMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#CurrentHumidityMeasurableInformation", CurrentHumidityMeasurableInformation.class, DefaultCurrentHumidityMeasurableInformation.class);
    }

    /**
     * Creates an instance of type CurrentHumidityMeasurableInformation.  Modifies the underlying ontology.
     */
    public CurrentHumidityMeasurableInformation createCurrentHumidityMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CURRENTHUMIDITYMEASURABLEINFORMATION, DefaultCurrentHumidityMeasurableInformation.class);
    }

    /**
     * Gets an instance of type CurrentHumidityMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CurrentHumidityMeasurableInformation getCurrentHumidityMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CURRENTHUMIDITYMEASURABLEINFORMATION, DefaultCurrentHumidityMeasurableInformation.class);
    }

    /**
     * Gets all instances of CurrentHumidityMeasurableInformation from the ontology.
     */
    public Collection<? extends CurrentHumidityMeasurableInformation> getAllCurrentHumidityMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CURRENTHUMIDITYMEASURABLEINFORMATION, DefaultCurrentHumidityMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#CurrentLearningUnitMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#CurrentLearningUnitMeasurableInformation", CurrentLearningUnitMeasurableInformation.class, DefaultCurrentLearningUnitMeasurableInformation.class);
    }

    /**
     * Creates an instance of type CurrentLearningUnitMeasurableInformation.  Modifies the underlying ontology.
     */
    public CurrentLearningUnitMeasurableInformation createCurrentLearningUnitMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CURRENTLEARNINGUNITMEASURABLEINFORMATION, DefaultCurrentLearningUnitMeasurableInformation.class);
    }

    /**
     * Gets an instance of type CurrentLearningUnitMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CurrentLearningUnitMeasurableInformation getCurrentLearningUnitMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CURRENTLEARNINGUNITMEASURABLEINFORMATION, DefaultCurrentLearningUnitMeasurableInformation.class);
    }

    /**
     * Gets all instances of CurrentLearningUnitMeasurableInformation from the ontology.
     */
    public Collection<? extends CurrentLearningUnitMeasurableInformation> getAllCurrentLearningUnitMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CURRENTLEARNINGUNITMEASURABLEINFORMATION, DefaultCurrentLearningUnitMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#CurrentLuminosityMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#CurrentLuminosityMeasurableInformation", CurrentLuminosityMeasurableInformation.class, DefaultCurrentLuminosityMeasurableInformation.class);
    }

    /**
     * Creates an instance of type CurrentLuminosityMeasurableInformation.  Modifies the underlying ontology.
     */
    public CurrentLuminosityMeasurableInformation createCurrentLuminosityMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CURRENTLUMINOSITYMEASURABLEINFORMATION, DefaultCurrentLuminosityMeasurableInformation.class);
    }

    /**
     * Gets an instance of type CurrentLuminosityMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CurrentLuminosityMeasurableInformation getCurrentLuminosityMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CURRENTLUMINOSITYMEASURABLEINFORMATION, DefaultCurrentLuminosityMeasurableInformation.class);
    }

    /**
     * Gets all instances of CurrentLuminosityMeasurableInformation from the ontology.
     */
    public Collection<? extends CurrentLuminosityMeasurableInformation> getAllCurrentLuminosityMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CURRENTLUMINOSITYMEASURABLEINFORMATION, DefaultCurrentLuminosityMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#CurrentTemperatureMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#CurrentTemperatureMeasurableInformation", CurrentTemperatureMeasurableInformation.class, DefaultCurrentTemperatureMeasurableInformation.class);
    }

    /**
     * Creates an instance of type CurrentTemperatureMeasurableInformation.  Modifies the underlying ontology.
     */
    public CurrentTemperatureMeasurableInformation createCurrentTemperatureMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CURRENTTEMPERATUREMEASURABLEINFORMATION, DefaultCurrentTemperatureMeasurableInformation.class);
    }

    /**
     * Gets an instance of type CurrentTemperatureMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CurrentTemperatureMeasurableInformation getCurrentTemperatureMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CURRENTTEMPERATUREMEASURABLEINFORMATION, DefaultCurrentTemperatureMeasurableInformation.class);
    }

    /**
     * Gets all instances of CurrentTemperatureMeasurableInformation from the ontology.
     */
    public Collection<? extends CurrentTemperatureMeasurableInformation> getAllCurrentTemperatureMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CURRENTTEMPERATUREMEASURABLEINFORMATION, DefaultCurrentTemperatureMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#CurrentTimeMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#CurrentTimeMeasurableInformation", CurrentTimeMeasurableInformation.class, DefaultCurrentTimeMeasurableInformation.class);
    }

    /**
     * Creates an instance of type CurrentTimeMeasurableInformation.  Modifies the underlying ontology.
     */
    public CurrentTimeMeasurableInformation createCurrentTimeMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CURRENTTIMEMEASURABLEINFORMATION, DefaultCurrentTimeMeasurableInformation.class);
    }

    /**
     * Gets an instance of type CurrentTimeMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CurrentTimeMeasurableInformation getCurrentTimeMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CURRENTTIMEMEASURABLEINFORMATION, DefaultCurrentTimeMeasurableInformation.class);
    }

    /**
     * Gets all instances of CurrentTimeMeasurableInformation from the ontology.
     */
    public Collection<? extends CurrentTimeMeasurableInformation> getAllCurrentTimeMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CURRENTTIMEMEASURABLEINFORMATION, DefaultCurrentTimeMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#CurrentlyRainingMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#CurrentlyRainingMeasurableInformation", CurrentlyRainingMeasurableInformation.class, DefaultCurrentlyRainingMeasurableInformation.class);
    }

    /**
     * Creates an instance of type CurrentlyRainingMeasurableInformation.  Modifies the underlying ontology.
     */
    public CurrentlyRainingMeasurableInformation createCurrentlyRainingMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CURRENTLYRAININGMEASURABLEINFORMATION, DefaultCurrentlyRainingMeasurableInformation.class);
    }

    /**
     * Gets an instance of type CurrentlyRainingMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CurrentlyRainingMeasurableInformation getCurrentlyRainingMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CURRENTLYRAININGMEASURABLEINFORMATION, DefaultCurrentlyRainingMeasurableInformation.class);
    }

    /**
     * Gets all instances of CurrentlyRainingMeasurableInformation from the ontology.
     */
    public Collection<? extends CurrentlyRainingMeasurableInformation> getAllCurrentlyRainingMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CURRENTLYRAININGMEASURABLEINFORMATION, DefaultCurrentlyRainingMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#CurrentlySunnyMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#CurrentlySunnyMeasurableInformation", CurrentlySunnyMeasurableInformation.class, DefaultCurrentlySunnyMeasurableInformation.class);
    }

    /**
     * Creates an instance of type CurrentlySunnyMeasurableInformation.  Modifies the underlying ontology.
     */
    public CurrentlySunnyMeasurableInformation createCurrentlySunnyMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CURRENTLYSUNNYMEASURABLEINFORMATION, DefaultCurrentlySunnyMeasurableInformation.class);
    }

    /**
     * Gets an instance of type CurrentlySunnyMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CurrentlySunnyMeasurableInformation getCurrentlySunnyMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CURRENTLYSUNNYMEASURABLEINFORMATION, DefaultCurrentlySunnyMeasurableInformation.class);
    }

    /**
     * Gets all instances of CurrentlySunnyMeasurableInformation from the ontology.
     */
    public Collection<? extends CurrentlySunnyMeasurableInformation> getAllCurrentlySunnyMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CURRENTLYSUNNYMEASURABLEINFORMATION, DefaultCurrentlySunnyMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#DateFormatContextParameter
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#DateFormatContextParameter", DateFormatContextParameter.class, DefaultDateFormatContextParameter.class);
    }

    /**
     * Creates an instance of type DateFormatContextParameter.  Modifies the underlying ontology.
     */
    public DateFormatContextParameter createDateFormatContextParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATEFORMATCONTEXTPARAMETER, DefaultDateFormatContextParameter.class);
    }

    /**
     * Gets an instance of type DateFormatContextParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DateFormatContextParameter getDateFormatContextParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATEFORMATCONTEXTPARAMETER, DefaultDateFormatContextParameter.class);
    }

    /**
     * Gets all instances of DateFormatContextParameter from the ontology.
     */
    public Collection<? extends DateFormatContextParameter> getAllDateFormatContextParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATEFORMATCONTEXTPARAMETER, DefaultDateFormatContextParameter.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#DeviceTypeMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#DeviceTypeMeasurableInformation", DeviceTypeMeasurableInformation.class, DefaultDeviceTypeMeasurableInformation.class);
    }

    /**
     * Creates an instance of type DeviceTypeMeasurableInformation.  Modifies the underlying ontology.
     */
    public DeviceTypeMeasurableInformation createDeviceTypeMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DEVICETYPEMEASURABLEINFORMATION, DefaultDeviceTypeMeasurableInformation.class);
    }

    /**
     * Gets an instance of type DeviceTypeMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DeviceTypeMeasurableInformation getDeviceTypeMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DEVICETYPEMEASURABLEINFORMATION, DefaultDeviceTypeMeasurableInformation.class);
    }

    /**
     * Gets all instances of DeviceTypeMeasurableInformation from the ontology.
     */
    public Collection<? extends DeviceTypeMeasurableInformation> getAllDeviceTypeMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DEVICETYPEMEASURABLEINFORMATION, DefaultDeviceTypeMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#DisplayHorizontalResolutionMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#DisplayHorizontalResolutionMeasurableInformation", DisplayHorizontalResolutionMeasurableInformation.class, DefaultDisplayHorizontalResolutionMeasurableInformation.class);
    }

    /**
     * Creates an instance of type DisplayHorizontalResolutionMeasurableInformation.  Modifies the underlying ontology.
     */
    public DisplayHorizontalResolutionMeasurableInformation createDisplayHorizontalResolutionMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DISPLAYHORIZONTALRESOLUTIONMEASURABLEINFORMATION, DefaultDisplayHorizontalResolutionMeasurableInformation.class);
    }

    /**
     * Gets an instance of type DisplayHorizontalResolutionMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DisplayHorizontalResolutionMeasurableInformation getDisplayHorizontalResolutionMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DISPLAYHORIZONTALRESOLUTIONMEASURABLEINFORMATION, DefaultDisplayHorizontalResolutionMeasurableInformation.class);
    }

    /**
     * Gets all instances of DisplayHorizontalResolutionMeasurableInformation from the ontology.
     */
    public Collection<? extends DisplayHorizontalResolutionMeasurableInformation> getAllDisplayHorizontalResolutionMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DISPLAYHORIZONTALRESOLUTIONMEASURABLEINFORMATION, DefaultDisplayHorizontalResolutionMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#DisplayVerticalResolutionMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#DisplayVerticalResolutionMeasurableInformation", DisplayVerticalResolutionMeasurableInformation.class, DefaultDisplayVerticalResolutionMeasurableInformation.class);
    }

    /**
     * Creates an instance of type DisplayVerticalResolutionMeasurableInformation.  Modifies the underlying ontology.
     */
    public DisplayVerticalResolutionMeasurableInformation createDisplayVerticalResolutionMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DISPLAYVERTICALRESOLUTIONMEASURABLEINFORMATION, DefaultDisplayVerticalResolutionMeasurableInformation.class);
    }

    /**
     * Gets an instance of type DisplayVerticalResolutionMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DisplayVerticalResolutionMeasurableInformation getDisplayVerticalResolutionMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DISPLAYVERTICALRESOLUTIONMEASURABLEINFORMATION, DefaultDisplayVerticalResolutionMeasurableInformation.class);
    }

    /**
     * Gets all instances of DisplayVerticalResolutionMeasurableInformation from the ontology.
     */
    public Collection<? extends DisplayVerticalResolutionMeasurableInformation> getAllDisplayVerticalResolutionMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DISPLAYVERTICALRESOLUTIONMEASURABLEINFORMATION, DefaultDisplayVerticalResolutionMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#DistanceUnitContextParameter
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#DistanceUnitContextParameter", DistanceUnitContextParameter.class, DefaultDistanceUnitContextParameter.class);
    }

    /**
     * Creates an instance of type DistanceUnitContextParameter.  Modifies the underlying ontology.
     */
    public DistanceUnitContextParameter createDistanceUnitContextParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DISTANCEUNITCONTEXTPARAMETER, DefaultDistanceUnitContextParameter.class);
    }

    /**
     * Gets an instance of type DistanceUnitContextParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DistanceUnitContextParameter getDistanceUnitContextParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DISTANCEUNITCONTEXTPARAMETER, DefaultDistanceUnitContextParameter.class);
    }

    /**
     * Gets all instances of DistanceUnitContextParameter from the ontology.
     */
    public Collection<? extends DistanceUnitContextParameter> getAllDistanceUnitContextParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DISTANCEUNITCONTEXTPARAMETER, DefaultDistanceUnitContextParameter.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ExpectedTimeNeededForCompletionMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ExpectedTimeNeededForCompletionMeasurableInformation", ExpectedTimeNeededForCompletionMeasurableInformation.class, DefaultExpectedTimeNeededForCompletionMeasurableInformation.class);
    }

    /**
     * Creates an instance of type ExpectedTimeNeededForCompletionMeasurableInformation.  Modifies the underlying ontology.
     */
    public ExpectedTimeNeededForCompletionMeasurableInformation createExpectedTimeNeededForCompletionMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EXPECTEDTIMENEEDEDFORCOMPLETIONMEASURABLEINFORMATION, DefaultExpectedTimeNeededForCompletionMeasurableInformation.class);
    }

    /**
     * Gets an instance of type ExpectedTimeNeededForCompletionMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ExpectedTimeNeededForCompletionMeasurableInformation getExpectedTimeNeededForCompletionMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EXPECTEDTIMENEEDEDFORCOMPLETIONMEASURABLEINFORMATION, DefaultExpectedTimeNeededForCompletionMeasurableInformation.class);
    }

    /**
     * Gets all instances of ExpectedTimeNeededForCompletionMeasurableInformation from the ontology.
     */
    public Collection<? extends ExpectedTimeNeededForCompletionMeasurableInformation> getAllExpectedTimeNeededForCompletionMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EXPECTEDTIMENEEDEDFORCOMPLETIONMEASURABLEINFORMATION, DefaultExpectedTimeNeededForCompletionMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ExternalDisplayAvailableMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ExternalDisplayAvailableMeasurableInformation", ExternalDisplayAvailableMeasurableInformation.class, DefaultExternalDisplayAvailableMeasurableInformation.class);
    }

    /**
     * Creates an instance of type ExternalDisplayAvailableMeasurableInformation.  Modifies the underlying ontology.
     */
    public ExternalDisplayAvailableMeasurableInformation createExternalDisplayAvailableMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EXTERNALDISPLAYAVAILABLEMEASURABLEINFORMATION, DefaultExternalDisplayAvailableMeasurableInformation.class);
    }

    /**
     * Gets an instance of type ExternalDisplayAvailableMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ExternalDisplayAvailableMeasurableInformation getExternalDisplayAvailableMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EXTERNALDISPLAYAVAILABLEMEASURABLEINFORMATION, DefaultExternalDisplayAvailableMeasurableInformation.class);
    }

    /**
     * Gets all instances of ExternalDisplayAvailableMeasurableInformation from the ontology.
     */
    public Collection<? extends ExternalDisplayAvailableMeasurableInformation> getAllExternalDisplayAvailableMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EXTERNALDISPLAYAVAILABLEMEASURABLEINFORMATION, DefaultExternalDisplayAvailableMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#Feature
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#Feature", Feature.class, DefaultFeature.class);
    }

    /**
     * Creates an instance of type Feature.  Modifies the underlying ontology.
     */
    public Feature createFeature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FEATURE, DefaultFeature.class);
    }

    /**
     * Gets an instance of type Feature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Feature getFeature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FEATURE, DefaultFeature.class);
    }

    /**
     * Gets all instances of Feature from the ontology.
     */
    public Collection<? extends Feature> getAllFeatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FEATURE, DefaultFeature.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#FinishedLearningUnitMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#FinishedLearningUnitMeasurableInformation", FinishedLearningUnitMeasurableInformation.class, DefaultFinishedLearningUnitMeasurableInformation.class);
    }

    /**
     * Creates an instance of type FinishedLearningUnitMeasurableInformation.  Modifies the underlying ontology.
     */
    public FinishedLearningUnitMeasurableInformation createFinishedLearningUnitMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FINISHEDLEARNINGUNITMEASURABLEINFORMATION, DefaultFinishedLearningUnitMeasurableInformation.class);
    }

    /**
     * Gets an instance of type FinishedLearningUnitMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FinishedLearningUnitMeasurableInformation getFinishedLearningUnitMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FINISHEDLEARNINGUNITMEASURABLEINFORMATION, DefaultFinishedLearningUnitMeasurableInformation.class);
    }

    /**
     * Gets all instances of FinishedLearningUnitMeasurableInformation from the ontology.
     */
    public Collection<? extends FinishedLearningUnitMeasurableInformation> getAllFinishedLearningUnitMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FINISHEDLEARNINGUNITMEASURABLEINFORMATION, DefaultFinishedLearningUnitMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#HasScreenReaderFunctionalityMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#HasScreenReaderFunctionalityMeasurableInformation", HasScreenReaderFunctionalityMeasurableInformation.class, DefaultHasScreenReaderFunctionalityMeasurableInformation.class);
    }

    /**
     * Creates an instance of type HasScreenReaderFunctionalityMeasurableInformation.  Modifies the underlying ontology.
     */
    public HasScreenReaderFunctionalityMeasurableInformation createHasScreenReaderFunctionalityMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HASSCREENREADERFUNCTIONALITYMEASURABLEINFORMATION, DefaultHasScreenReaderFunctionalityMeasurableInformation.class);
    }

    /**
     * Gets an instance of type HasScreenReaderFunctionalityMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HasScreenReaderFunctionalityMeasurableInformation getHasScreenReaderFunctionalityMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HASSCREENREADERFUNCTIONALITYMEASURABLEINFORMATION, DefaultHasScreenReaderFunctionalityMeasurableInformation.class);
    }

    /**
     * Gets all instances of HasScreenReaderFunctionalityMeasurableInformation from the ontology.
     */
    public Collection<? extends HasScreenReaderFunctionalityMeasurableInformation> getAllHasScreenReaderFunctionalityMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HASSCREENREADERFUNCTIONALITYMEASURABLEINFORMATION, DefaultHasScreenReaderFunctionalityMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#LatitudeContextParameter
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#LatitudeContextParameter", LatitudeContextParameter.class, DefaultLatitudeContextParameter.class);
    }

    /**
     * Creates an instance of type LatitudeContextParameter.  Modifies the underlying ontology.
     */
    public LatitudeContextParameter createLatitudeContextParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LATITUDECONTEXTPARAMETER, DefaultLatitudeContextParameter.class);
    }

    /**
     * Gets an instance of type LatitudeContextParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LatitudeContextParameter getLatitudeContextParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LATITUDECONTEXTPARAMETER, DefaultLatitudeContextParameter.class);
    }

    /**
     * Gets all instances of LatitudeContextParameter from the ontology.
     */
    public Collection<? extends LatitudeContextParameter> getAllLatitudeContextParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LATITUDECONTEXTPARAMETER, DefaultLatitudeContextParameter.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#LearningUnit
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#LearningUnit", LearningUnit.class, DefaultLearningUnit.class);
    }

    /**
     * Creates an instance of type LearningUnit.  Modifies the underlying ontology.
     */
    public LearningUnit createLearningUnit(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LEARNINGUNIT, DefaultLearningUnit.class);
    }

    /**
     * Gets an instance of type LearningUnit with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LearningUnit getLearningUnit(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LEARNINGUNIT, DefaultLearningUnit.class);
    }

    /**
     * Gets all instances of LearningUnit from the ontology.
     */
    public Collection<? extends LearningUnit> getAllLearningUnitInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LEARNINGUNIT, DefaultLearningUnit.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#LearningUnitClass
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#LearningUnitClass", LearningUnitClass.class, DefaultLearningUnitClass.class);
    }

    /**
     * Creates an instance of type LearningUnitClass.  Modifies the underlying ontology.
     */
    public LearningUnitClass createLearningUnitClass(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LEARNINGUNITCLASS, DefaultLearningUnitClass.class);
    }

    /**
     * Gets an instance of type LearningUnitClass with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LearningUnitClass getLearningUnitClass(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LEARNINGUNITCLASS, DefaultLearningUnitClass.class);
    }

    /**
     * Gets all instances of LearningUnitClass from the ontology.
     */
    public Collection<? extends LearningUnitClass> getAllLearningUnitClassInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LEARNINGUNITCLASS, DefaultLearningUnitClass.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#LearningUnitClassConstraint
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#LearningUnitClassConstraint", LearningUnitClassConstraint.class, DefaultLearningUnitClassConstraint.class);
    }

    /**
     * Creates an instance of type LearningUnitClassConstraint.  Modifies the underlying ontology.
     */
    public LearningUnitClassConstraint createLearningUnitClassConstraint(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LEARNINGUNITCLASSCONSTRAINT, DefaultLearningUnitClassConstraint.class);
    }

    /**
     * Gets an instance of type LearningUnitClassConstraint with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LearningUnitClassConstraint getLearningUnitClassConstraint(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LEARNINGUNITCLASSCONSTRAINT, DefaultLearningUnitClassConstraint.class);
    }

    /**
     * Gets all instances of LearningUnitClassConstraint from the ontology.
     */
    public Collection<? extends LearningUnitClassConstraint> getAllLearningUnitClassConstraintInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LEARNINGUNITCLASSCONSTRAINT, DefaultLearningUnitClassConstraint.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#LearningUnitIDContextParameter
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#LearningUnitIDContextParameter", LearningUnitIDContextParameter.class, DefaultLearningUnitIDContextParameter.class);
    }

    /**
     * Creates an instance of type LearningUnitIDContextParameter.  Modifies the underlying ontology.
     */
    public LearningUnitIDContextParameter createLearningUnitIDContextParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LEARNINGUNITIDCONTEXTPARAMETER, DefaultLearningUnitIDContextParameter.class);
    }

    /**
     * Gets an instance of type LearningUnitIDContextParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LearningUnitIDContextParameter getLearningUnitIDContextParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LEARNINGUNITIDCONTEXTPARAMETER, DefaultLearningUnitIDContextParameter.class);
    }

    /**
     * Gets all instances of LearningUnitIDContextParameter from the ontology.
     */
    public Collection<? extends LearningUnitIDContextParameter> getAllLearningUnitIDContextParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LEARNINGUNITIDCONTEXTPARAMETER, DefaultLearningUnitIDContextParameter.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#LocationContext
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#LocationContext", LocationContext.class, DefaultLocationContext.class);
    }

    /**
     * Creates an instance of type LocationContext.  Modifies the underlying ontology.
     */
    public LocationContext createLocationContext(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LOCATIONCONTEXT, DefaultLocationContext.class);
    }

    /**
     * Gets an instance of type LocationContext with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LocationContext getLocationContext(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LOCATIONCONTEXT, DefaultLocationContext.class);
    }

    /**
     * Gets all instances of LocationContext from the ontology.
     */
    public Collection<? extends LocationContext> getAllLocationContextInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LOCATIONCONTEXT, DefaultLocationContext.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#LocationContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#LocationContextInformation", LocationContextInformation.class, DefaultLocationContextInformation.class);
    }

    /**
     * Creates an instance of type LocationContextInformation.  Modifies the underlying ontology.
     */
    public LocationContextInformation createLocationContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LOCATIONCONTEXTINFORMATION, DefaultLocationContextInformation.class);
    }

    /**
     * Gets an instance of type LocationContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LocationContextInformation getLocationContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LOCATIONCONTEXTINFORMATION, DefaultLocationContextInformation.class);
    }

    /**
     * Gets all instances of LocationContextInformation from the ontology.
     */
    public Collection<? extends LocationContextInformation> getAllLocationContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LOCATIONCONTEXTINFORMATION, DefaultLocationContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#LongitudeContextParameter
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#LongitudeContextParameter", LongitudeContextParameter.class, DefaultLongitudeContextParameter.class);
    }

    /**
     * Creates an instance of type LongitudeContextParameter.  Modifies the underlying ontology.
     */
    public LongitudeContextParameter createLongitudeContextParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LONGITUDECONTEXTPARAMETER, DefaultLongitudeContextParameter.class);
    }

    /**
     * Gets an instance of type LongitudeContextParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LongitudeContextParameter getLongitudeContextParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LONGITUDECONTEXTPARAMETER, DefaultLongitudeContextParameter.class);
    }

    /**
     * Gets all instances of LongitudeContextParameter from the ontology.
     */
    public Collection<? extends LongitudeContextParameter> getAllLongitudeContextParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LONGITUDECONTEXTPARAMETER, DefaultLongitudeContextParameter.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#MeasurableContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#MeasurableContextInformation", MeasurableContextInformation.class, DefaultMeasurableContextInformation.class);
    }

    /**
     * Creates an instance of type MeasurableContextInformation.  Modifies the underlying ontology.
     */
    public MeasurableContextInformation createMeasurableContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEASURABLECONTEXTINFORMATION, DefaultMeasurableContextInformation.class);
    }

    /**
     * Gets an instance of type MeasurableContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MeasurableContextInformation getMeasurableContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEASURABLECONTEXTINFORMATION, DefaultMeasurableContextInformation.class);
    }

    /**
     * Gets all instances of MeasurableContextInformation from the ontology.
     */
    public Collection<? extends MeasurableContextInformation> getAllMeasurableContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEASURABLECONTEXTINFORMATION, DefaultMeasurableContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#MicrophoneAvailableMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#MicrophoneAvailableMeasurableInformation", MicrophoneAvailableMeasurableInformation.class, DefaultMicrophoneAvailableMeasurableInformation.class);
    }

    /**
     * Creates an instance of type MicrophoneAvailableMeasurableInformation.  Modifies the underlying ontology.
     */
    public MicrophoneAvailableMeasurableInformation createMicrophoneAvailableMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MICROPHONEAVAILABLEMEASURABLEINFORMATION, DefaultMicrophoneAvailableMeasurableInformation.class);
    }

    /**
     * Gets an instance of type MicrophoneAvailableMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MicrophoneAvailableMeasurableInformation getMicrophoneAvailableMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MICROPHONEAVAILABLEMEASURABLEINFORMATION, DefaultMicrophoneAvailableMeasurableInformation.class);
    }

    /**
     * Gets all instances of MicrophoneAvailableMeasurableInformation from the ontology.
     */
    public Collection<? extends MicrophoneAvailableMeasurableInformation> getAllMicrophoneAvailableMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MICROPHONEAVAILABLEMEASURABLEINFORMATION, DefaultMicrophoneAvailableMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#MixedContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#MixedContextInformation", MixedContextInformation.class, DefaultMixedContextInformation.class);
    }

    /**
     * Creates an instance of type MixedContextInformation.  Modifies the underlying ontology.
     */
    public MixedContextInformation createMixedContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MIXEDCONTEXTINFORMATION, DefaultMixedContextInformation.class);
    }

    /**
     * Gets an instance of type MixedContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MixedContextInformation getMixedContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MIXEDCONTEXTINFORMATION, DefaultMixedContextInformation.class);
    }

    /**
     * Gets all instances of MixedContextInformation from the ontology.
     */
    public Collection<? extends MixedContextInformation> getAllMixedContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MIXEDCONTEXTINFORMATION, DefaultMixedContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#NextAppointmentMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#NextAppointmentMeasurableInformation", NextAppointmentMeasurableInformation.class, DefaultNextAppointmentMeasurableInformation.class);
    }

    /**
     * Creates an instance of type NextAppointmentMeasurableInformation.  Modifies the underlying ontology.
     */
    public NextAppointmentMeasurableInformation createNextAppointmentMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NEXTAPPOINTMENTMEASURABLEINFORMATION, DefaultNextAppointmentMeasurableInformation.class);
    }

    /**
     * Gets an instance of type NextAppointmentMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NextAppointmentMeasurableInformation getNextAppointmentMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NEXTAPPOINTMENTMEASURABLEINFORMATION, DefaultNextAppointmentMeasurableInformation.class);
    }

    /**
     * Gets all instances of NextAppointmentMeasurableInformation from the ontology.
     */
    public Collection<? extends NextAppointmentMeasurableInformation> getAllNextAppointmentMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NEXTAPPOINTMENTMEASURABLEINFORMATION, DefaultNextAppointmentMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ParameterizedContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ParameterizedContextInformation", ParameterizedContextInformation.class, DefaultParameterizedContextInformation.class);
    }

    /**
     * Creates an instance of type ParameterizedContextInformation.  Modifies the underlying ontology.
     */
    public ParameterizedContextInformation createParameterizedContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PARAMETERIZEDCONTEXTINFORMATION, DefaultParameterizedContextInformation.class);
    }

    /**
     * Gets an instance of type ParameterizedContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ParameterizedContextInformation getParameterizedContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PARAMETERIZEDCONTEXTINFORMATION, DefaultParameterizedContextInformation.class);
    }

    /**
     * Gets all instances of ParameterizedContextInformation from the ontology.
     */
    public Collection<? extends ParameterizedContextInformation> getAllParameterizedContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PARAMETERIZEDCONTEXTINFORMATION, DefaultParameterizedContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#PersonalContext
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#PersonalContext", PersonalContext.class, DefaultPersonalContext.class);
    }

    /**
     * Creates an instance of type PersonalContext.  Modifies the underlying ontology.
     */
    public PersonalContext createPersonalContext(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERSONALCONTEXT, DefaultPersonalContext.class);
    }

    /**
     * Gets an instance of type PersonalContext with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PersonalContext getPersonalContext(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERSONALCONTEXT, DefaultPersonalContext.class);
    }

    /**
     * Gets all instances of PersonalContext from the ontology.
     */
    public Collection<? extends PersonalContext> getAllPersonalContextInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERSONALCONTEXT, DefaultPersonalContext.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#PersonalContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#PersonalContextInformation", PersonalContextInformation.class, DefaultPersonalContextInformation.class);
    }

    /**
     * Creates an instance of type PersonalContextInformation.  Modifies the underlying ontology.
     */
    public PersonalContextInformation createPersonalContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERSONALCONTEXTINFORMATION, DefaultPersonalContextInformation.class);
    }

    /**
     * Gets an instance of type PersonalContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PersonalContextInformation getPersonalContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERSONALCONTEXTINFORMATION, DefaultPersonalContextInformation.class);
    }

    /**
     * Gets all instances of PersonalContextInformation from the ontology.
     */
    public Collection<? extends PersonalContextInformation> getAllPersonalContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERSONALCONTEXTINFORMATION, DefaultPersonalContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#PhotoCameraAvailableMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#PhotoCameraAvailableMeasurableInformation", PhotoCameraAvailableMeasurableInformation.class, DefaultPhotoCameraAvailableMeasurableInformation.class);
    }

    /**
     * Creates an instance of type PhotoCameraAvailableMeasurableInformation.  Modifies the underlying ontology.
     */
    public PhotoCameraAvailableMeasurableInformation createPhotoCameraAvailableMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PHOTOCAMERAAVAILABLEMEASURABLEINFORMATION, DefaultPhotoCameraAvailableMeasurableInformation.class);
    }

    /**
     * Gets an instance of type PhotoCameraAvailableMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PhotoCameraAvailableMeasurableInformation getPhotoCameraAvailableMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PHOTOCAMERAAVAILABLEMEASURABLEINFORMATION, DefaultPhotoCameraAvailableMeasurableInformation.class);
    }

    /**
     * Gets all instances of PhotoCameraAvailableMeasurableInformation from the ontology.
     */
    public Collection<? extends PhotoCameraAvailableMeasurableInformation> getAllPhotoCameraAvailableMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PHOTOCAMERAAVAILABLEMEASURABLEINFORMATION, DefaultPhotoCameraAvailableMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#PhysicalContext
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#PhysicalContext", PhysicalContext.class, DefaultPhysicalContext.class);
    }

    /**
     * Creates an instance of type PhysicalContext.  Modifies the underlying ontology.
     */
    public PhysicalContext createPhysicalContext(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PHYSICALCONTEXT, DefaultPhysicalContext.class);
    }

    /**
     * Gets an instance of type PhysicalContext with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PhysicalContext getPhysicalContext(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PHYSICALCONTEXT, DefaultPhysicalContext.class);
    }

    /**
     * Gets all instances of PhysicalContext from the ontology.
     */
    public Collection<? extends PhysicalContext> getAllPhysicalContextInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PHYSICALCONTEXT, DefaultPhysicalContext.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#PhysicalContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#PhysicalContextInformation", PhysicalContextInformation.class, DefaultPhysicalContextInformation.class);
    }

    /**
     * Creates an instance of type PhysicalContextInformation.  Modifies the underlying ontology.
     */
    public PhysicalContextInformation createPhysicalContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PHYSICALCONTEXTINFORMATION, DefaultPhysicalContextInformation.class);
    }

    /**
     * Gets an instance of type PhysicalContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PhysicalContextInformation getPhysicalContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PHYSICALCONTEXTINFORMATION, DefaultPhysicalContextInformation.class);
    }

    /**
     * Gets all instances of PhysicalContextInformation from the ontology.
     */
    public Collection<? extends PhysicalContextInformation> getAllPhysicalContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PHYSICALCONTEXTINFORMATION, DefaultPhysicalContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#PressureUnitContextParameter
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#PressureUnitContextParameter", PressureUnitContextParameter.class, DefaultPressureUnitContextParameter.class);
    }

    /**
     * Creates an instance of type PressureUnitContextParameter.  Modifies the underlying ontology.
     */
    public PressureUnitContextParameter createPressureUnitContextParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRESSUREUNITCONTEXTPARAMETER, DefaultPressureUnitContextParameter.class);
    }

    /**
     * Gets an instance of type PressureUnitContextParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PressureUnitContextParameter getPressureUnitContextParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRESSUREUNITCONTEXTPARAMETER, DefaultPressureUnitContextParameter.class);
    }

    /**
     * Gets all instances of PressureUnitContextParameter from the ontology.
     */
    public Collection<? extends PressureUnitContextParameter> getAllPressureUnitContextParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRESSUREUNITCONTEXTPARAMETER, DefaultPressureUnitContextParameter.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#PrinterAvailableMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#PrinterAvailableMeasurableInformation", PrinterAvailableMeasurableInformation.class, DefaultPrinterAvailableMeasurableInformation.class);
    }

    /**
     * Creates an instance of type PrinterAvailableMeasurableInformation.  Modifies the underlying ontology.
     */
    public PrinterAvailableMeasurableInformation createPrinterAvailableMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRINTERAVAILABLEMEASURABLEINFORMATION, DefaultPrinterAvailableMeasurableInformation.class);
    }

    /**
     * Gets an instance of type PrinterAvailableMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PrinterAvailableMeasurableInformation getPrinterAvailableMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRINTERAVAILABLEMEASURABLEINFORMATION, DefaultPrinterAvailableMeasurableInformation.class);
    }

    /**
     * Gets all instances of PrinterAvailableMeasurableInformation from the ontology.
     */
    public Collection<? extends PrinterAvailableMeasurableInformation> getAllPrinterAvailableMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRINTERAVAILABLEMEASURABLEINFORMATION, DefaultPrinterAvailableMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#PrintingInkContextParameter
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#PrintingInkContextParameter", PrintingInkContextParameter.class, DefaultPrintingInkContextParameter.class);
    }

    /**
     * Creates an instance of type PrintingInkContextParameter.  Modifies the underlying ontology.
     */
    public PrintingInkContextParameter createPrintingInkContextParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRINTINGINKCONTEXTPARAMETER, DefaultPrintingInkContextParameter.class);
    }

    /**
     * Gets an instance of type PrintingInkContextParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PrintingInkContextParameter getPrintingInkContextParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRINTINGINKCONTEXTPARAMETER, DefaultPrintingInkContextParameter.class);
    }

    /**
     * Gets all instances of PrintingInkContextParameter from the ontology.
     */
    public Collection<? extends PrintingInkContextParameter> getAllPrintingInkContextParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRINTINGINKCONTEXTPARAMETER, DefaultPrintingInkContextParameter.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#RankingConstraintRequirement
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#RankingConstraintRequirement", RankingConstraintRequirement.class, DefaultRankingConstraintRequirement.class);
    }

    /**
     * Creates an instance of type RankingConstraintRequirement.  Modifies the underlying ontology.
     */
    public RankingConstraintRequirement createRankingConstraintRequirement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RANKINGCONSTRAINTREQUIREMENT, DefaultRankingConstraintRequirement.class);
    }

    /**
     * Gets an instance of type RankingConstraintRequirement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RankingConstraintRequirement getRankingConstraintRequirement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RANKINGCONSTRAINTREQUIREMENT, DefaultRankingConstraintRequirement.class);
    }

    /**
     * Gets all instances of RankingConstraintRequirement from the ontology.
     */
    public Collection<? extends RankingConstraintRequirement> getAllRankingConstraintRequirementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RANKINGCONSTRAINTREQUIREMENT, DefaultRankingConstraintRequirement.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#RestrictFeatureConstraint
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#RestrictFeatureConstraint", RestrictFeatureConstraint.class, DefaultRestrictFeatureConstraint.class);
    }

    /**
     * Creates an instance of type RestrictFeatureConstraint.  Modifies the underlying ontology.
     */
    public RestrictFeatureConstraint createRestrictFeatureConstraint(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RESTRICTFEATURECONSTRAINT, DefaultRestrictFeatureConstraint.class);
    }

    /**
     * Gets an instance of type RestrictFeatureConstraint with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RestrictFeatureConstraint getRestrictFeatureConstraint(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RESTRICTFEATURECONSTRAINT, DefaultRestrictFeatureConstraint.class);
    }

    /**
     * Gets all instances of RestrictFeatureConstraint from the ontology.
     */
    public Collection<? extends RestrictFeatureConstraint> getAllRestrictFeatureConstraintInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RESTRICTFEATURECONSTRAINT, DefaultRestrictFeatureConstraint.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ScenarioContext
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ScenarioContext", ScenarioContext.class, DefaultScenarioContext.class);
    }

    /**
     * Creates an instance of type ScenarioContext.  Modifies the underlying ontology.
     */
    public ScenarioContext createScenarioContext(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCENARIOCONTEXT, DefaultScenarioContext.class);
    }

    /**
     * Gets an instance of type ScenarioContext with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ScenarioContext getScenarioContext(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCENARIOCONTEXT, DefaultScenarioContext.class);
    }

    /**
     * Gets all instances of ScenarioContext from the ontology.
     */
    public Collection<? extends ScenarioContext> getAllScenarioContextInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCENARIOCONTEXT, DefaultScenarioContext.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ScenarioContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ScenarioContextInformation", ScenarioContextInformation.class, DefaultScenarioContextInformation.class);
    }

    /**
     * Creates an instance of type ScenarioContextInformation.  Modifies the underlying ontology.
     */
    public ScenarioContextInformation createScenarioContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCENARIOCONTEXTINFORMATION, DefaultScenarioContextInformation.class);
    }

    /**
     * Gets an instance of type ScenarioContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ScenarioContextInformation getScenarioContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCENARIOCONTEXTINFORMATION, DefaultScenarioContextInformation.class);
    }

    /**
     * Gets all instances of ScenarioContextInformation from the ontology.
     */
    public Collection<? extends ScenarioContextInformation> getAllScenarioContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCENARIOCONTEXTINFORMATION, DefaultScenarioContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#SituationalContext
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#SituationalContext", SituationalContext.class, DefaultSituationalContext.class);
    }

    /**
     * Creates an instance of type SituationalContext.  Modifies the underlying ontology.
     */
    public SituationalContext createSituationalContext(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SITUATIONALCONTEXT, DefaultSituationalContext.class);
    }

    /**
     * Gets an instance of type SituationalContext with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SituationalContext getSituationalContext(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SITUATIONALCONTEXT, DefaultSituationalContext.class);
    }

    /**
     * Gets all instances of SituationalContext from the ontology.
     */
    public Collection<? extends SituationalContext> getAllSituationalContextInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SITUATIONALCONTEXT, DefaultSituationalContext.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#SituationalContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#SituationalContextInformation", SituationalContextInformation.class, DefaultSituationalContextInformation.class);
    }

    /**
     * Creates an instance of type SituationalContextInformation.  Modifies the underlying ontology.
     */
    public SituationalContextInformation createSituationalContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SITUATIONALCONTEXTINFORMATION, DefaultSituationalContextInformation.class);
    }

    /**
     * Gets an instance of type SituationalContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SituationalContextInformation getSituationalContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SITUATIONALCONTEXTINFORMATION, DefaultSituationalContextInformation.class);
    }

    /**
     * Gets all instances of SituationalContextInformation from the ontology.
     */
    public Collection<? extends SituationalContextInformation> getAllSituationalContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SITUATIONALCONTEXTINFORMATION, DefaultSituationalContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#TargetLatitudeContextParameter
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#TargetLatitudeContextParameter", TargetLatitudeContextParameter.class, DefaultTargetLatitudeContextParameter.class);
    }

    /**
     * Creates an instance of type TargetLatitudeContextParameter.  Modifies the underlying ontology.
     */
    public TargetLatitudeContextParameter createTargetLatitudeContextParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TARGETLATITUDECONTEXTPARAMETER, DefaultTargetLatitudeContextParameter.class);
    }

    /**
     * Gets an instance of type TargetLatitudeContextParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TargetLatitudeContextParameter getTargetLatitudeContextParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TARGETLATITUDECONTEXTPARAMETER, DefaultTargetLatitudeContextParameter.class);
    }

    /**
     * Gets all instances of TargetLatitudeContextParameter from the ontology.
     */
    public Collection<? extends TargetLatitudeContextParameter> getAllTargetLatitudeContextParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TARGETLATITUDECONTEXTPARAMETER, DefaultTargetLatitudeContextParameter.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#TargetLongitudeContextParameter
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#TargetLongitudeContextParameter", TargetLongitudeContextParameter.class, DefaultTargetLongitudeContextParameter.class);
    }

    /**
     * Creates an instance of type TargetLongitudeContextParameter.  Modifies the underlying ontology.
     */
    public TargetLongitudeContextParameter createTargetLongitudeContextParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TARGETLONGITUDECONTEXTPARAMETER, DefaultTargetLongitudeContextParameter.class);
    }

    /**
     * Gets an instance of type TargetLongitudeContextParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TargetLongitudeContextParameter getTargetLongitudeContextParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TARGETLONGITUDECONTEXTPARAMETER, DefaultTargetLongitudeContextParameter.class);
    }

    /**
     * Gets all instances of TargetLongitudeContextParameter from the ontology.
     */
    public Collection<? extends TargetLongitudeContextParameter> getAllTargetLongitudeContextParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TARGETLONGITUDECONTEXTPARAMETER, DefaultTargetLongitudeContextParameter.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#TargetTimestampContextParameter
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#TargetTimestampContextParameter", TargetTimestampContextParameter.class, DefaultTargetTimestampContextParameter.class);
    }

    /**
     * Creates an instance of type TargetTimestampContextParameter.  Modifies the underlying ontology.
     */
    public TargetTimestampContextParameter createTargetTimestampContextParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TARGETTIMESTAMPCONTEXTPARAMETER, DefaultTargetTimestampContextParameter.class);
    }

    /**
     * Gets an instance of type TargetTimestampContextParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TargetTimestampContextParameter getTargetTimestampContextParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TARGETTIMESTAMPCONTEXTPARAMETER, DefaultTargetTimestampContextParameter.class);
    }

    /**
     * Gets all instances of TargetTimestampContextParameter from the ontology.
     */
    public Collection<? extends TargetTimestampContextParameter> getAllTargetTimestampContextParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TARGETTIMESTAMPCONTEXTPARAMETER, DefaultTargetTimestampContextParameter.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#TechnicalContext
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#TechnicalContext", TechnicalContext.class, DefaultTechnicalContext.class);
    }

    /**
     * Creates an instance of type TechnicalContext.  Modifies the underlying ontology.
     */
    public TechnicalContext createTechnicalContext(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TECHNICALCONTEXT, DefaultTechnicalContext.class);
    }

    /**
     * Gets an instance of type TechnicalContext with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TechnicalContext getTechnicalContext(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TECHNICALCONTEXT, DefaultTechnicalContext.class);
    }

    /**
     * Gets all instances of TechnicalContext from the ontology.
     */
    public Collection<? extends TechnicalContext> getAllTechnicalContextInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TECHNICALCONTEXT, DefaultTechnicalContext.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#TechnicalContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#TechnicalContextInformation", TechnicalContextInformation.class, DefaultTechnicalContextInformation.class);
    }

    /**
     * Creates an instance of type TechnicalContextInformation.  Modifies the underlying ontology.
     */
    public TechnicalContextInformation createTechnicalContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TECHNICALCONTEXTINFORMATION, DefaultTechnicalContextInformation.class);
    }

    /**
     * Gets an instance of type TechnicalContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TechnicalContextInformation getTechnicalContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TECHNICALCONTEXTINFORMATION, DefaultTechnicalContextInformation.class);
    }

    /**
     * Gets all instances of TechnicalContextInformation from the ontology.
     */
    public Collection<? extends TechnicalContextInformation> getAllTechnicalContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TECHNICALCONTEXTINFORMATION, DefaultTechnicalContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#TemperatureScaleContextParameter
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#TemperatureScaleContextParameter", TemperatureScaleContextParameter.class, DefaultTemperatureScaleContextParameter.class);
    }

    /**
     * Creates an instance of type TemperatureScaleContextParameter.  Modifies the underlying ontology.
     */
    public TemperatureScaleContextParameter createTemperatureScaleContextParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPERATURESCALECONTEXTPARAMETER, DefaultTemperatureScaleContextParameter.class);
    }

    /**
     * Gets an instance of type TemperatureScaleContextParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TemperatureScaleContextParameter getTemperatureScaleContextParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPERATURESCALECONTEXTPARAMETER, DefaultTemperatureScaleContextParameter.class);
    }

    /**
     * Gets all instances of TemperatureScaleContextParameter from the ontology.
     */
    public Collection<? extends TemperatureScaleContextParameter> getAllTemperatureScaleContextParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPERATURESCALECONTEXTPARAMETER, DefaultTemperatureScaleContextParameter.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#TimeUntilTimestampMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#TimeUntilTimestampMeasurableInformation", TimeUntilTimestampMeasurableInformation.class, DefaultTimeUntilTimestampMeasurableInformation.class);
    }

    /**
     * Creates an instance of type TimeUntilTimestampMeasurableInformation.  Modifies the underlying ontology.
     */
    public TimeUntilTimestampMeasurableInformation createTimeUntilTimestampMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TIMEUNTILTIMESTAMPMEASURABLEINFORMATION, DefaultTimeUntilTimestampMeasurableInformation.class);
    }

    /**
     * Gets an instance of type TimeUntilTimestampMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TimeUntilTimestampMeasurableInformation getTimeUntilTimestampMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TIMEUNTILTIMESTAMPMEASURABLEINFORMATION, DefaultTimeUntilTimestampMeasurableInformation.class);
    }

    /**
     * Gets all instances of TimeUntilTimestampMeasurableInformation from the ontology.
     */
    public Collection<? extends TimeUntilTimestampMeasurableInformation> getAllTimeUntilTimestampMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TIMEUNTILTIMESTAMPMEASURABLEINFORMATION, DefaultTimeUntilTimestampMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserAgeMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserAgeMeasurableInformation", UserAgeMeasurableInformation.class, DefaultUserAgeMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserAgeMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserAgeMeasurableInformation createUserAgeMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERAGEMEASURABLEINFORMATION, DefaultUserAgeMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserAgeMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserAgeMeasurableInformation getUserAgeMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERAGEMEASURABLEINFORMATION, DefaultUserAgeMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserAgeMeasurableInformation from the ontology.
     */
    public Collection<? extends UserAgeMeasurableInformation> getAllUserAgeMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERAGEMEASURABLEINFORMATION, DefaultUserAgeMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserCurrentLearningStyleInputMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserCurrentLearningStyleInputMeasurableInformation", UserCurrentLearningStyleInputMeasurableInformation.class, DefaultUserCurrentLearningStyleInputMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserCurrentLearningStyleInputMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserCurrentLearningStyleInputMeasurableInformation createUserCurrentLearningStyleInputMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERCURRENTLEARNINGSTYLEINPUTMEASURABLEINFORMATION, DefaultUserCurrentLearningStyleInputMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserCurrentLearningStyleInputMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserCurrentLearningStyleInputMeasurableInformation getUserCurrentLearningStyleInputMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERCURRENTLEARNINGSTYLEINPUTMEASURABLEINFORMATION, DefaultUserCurrentLearningStyleInputMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserCurrentLearningStyleInputMeasurableInformation from the ontology.
     */
    public Collection<? extends UserCurrentLearningStyleInputMeasurableInformation> getAllUserCurrentLearningStyleInputMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERCURRENTLEARNINGSTYLEINPUTMEASURABLEINFORMATION, DefaultUserCurrentLearningStyleInputMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserCurrentLearningStylePerceptionMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserCurrentLearningStylePerceptionMeasurableInformation", UserCurrentLearningStylePerceptionMeasurableInformation.class, DefaultUserCurrentLearningStylePerceptionMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserCurrentLearningStylePerceptionMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserCurrentLearningStylePerceptionMeasurableInformation createUserCurrentLearningStylePerceptionMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERCURRENTLEARNINGSTYLEPERCEPTIONMEASURABLEINFORMATION, DefaultUserCurrentLearningStylePerceptionMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserCurrentLearningStylePerceptionMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserCurrentLearningStylePerceptionMeasurableInformation getUserCurrentLearningStylePerceptionMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERCURRENTLEARNINGSTYLEPERCEPTIONMEASURABLEINFORMATION, DefaultUserCurrentLearningStylePerceptionMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserCurrentLearningStylePerceptionMeasurableInformation from the ontology.
     */
    public Collection<? extends UserCurrentLearningStylePerceptionMeasurableInformation> getAllUserCurrentLearningStylePerceptionMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERCURRENTLEARNINGSTYLEPERCEPTIONMEASURABLEINFORMATION, DefaultUserCurrentLearningStylePerceptionMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserCurrentLearningStyleProcessingMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserCurrentLearningStyleProcessingMeasurableInformation", UserCurrentLearningStyleProcessingMeasurableInformation.class, DefaultUserCurrentLearningStyleProcessingMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserCurrentLearningStyleProcessingMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserCurrentLearningStyleProcessingMeasurableInformation createUserCurrentLearningStyleProcessingMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERCURRENTLEARNINGSTYLEPROCESSINGMEASURABLEINFORMATION, DefaultUserCurrentLearningStyleProcessingMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserCurrentLearningStyleProcessingMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserCurrentLearningStyleProcessingMeasurableInformation getUserCurrentLearningStyleProcessingMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERCURRENTLEARNINGSTYLEPROCESSINGMEASURABLEINFORMATION, DefaultUserCurrentLearningStyleProcessingMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserCurrentLearningStyleProcessingMeasurableInformation from the ontology.
     */
    public Collection<? extends UserCurrentLearningStyleProcessingMeasurableInformation> getAllUserCurrentLearningStyleProcessingMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERCURRENTLEARNINGSTYLEPROCESSINGMEASURABLEINFORMATION, DefaultUserCurrentLearningStyleProcessingMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserCurrentLearningStyleUnderstandingMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserCurrentLearningStyleUnderstandingMeasurableInformation", UserCurrentLearningStyleUnderstandingMeasurableInformation.class, DefaultUserCurrentLearningStyleUnderstandingMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserCurrentLearningStyleUnderstandingMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserCurrentLearningStyleUnderstandingMeasurableInformation createUserCurrentLearningStyleUnderstandingMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERCURRENTLEARNINGSTYLEUNDERSTANDINGMEASURABLEINFORMATION, DefaultUserCurrentLearningStyleUnderstandingMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserCurrentLearningStyleUnderstandingMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserCurrentLearningStyleUnderstandingMeasurableInformation getUserCurrentLearningStyleUnderstandingMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERCURRENTLEARNINGSTYLEUNDERSTANDINGMEASURABLEINFORMATION, DefaultUserCurrentLearningStyleUnderstandingMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserCurrentLearningStyleUnderstandingMeasurableInformation from the ontology.
     */
    public Collection<? extends UserCurrentLearningStyleUnderstandingMeasurableInformation> getAllUserCurrentLearningStyleUnderstandingMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERCURRENTLEARNINGSTYLEUNDERSTANDINGMEASURABLEINFORMATION, DefaultUserCurrentLearningStyleUnderstandingMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserDestinationMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserDestinationMeasurableInformation", UserDestinationMeasurableInformation.class, DefaultUserDestinationMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserDestinationMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserDestinationMeasurableInformation createUserDestinationMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERDESTINATIONMEASURABLEINFORMATION, DefaultUserDestinationMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserDestinationMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserDestinationMeasurableInformation getUserDestinationMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERDESTINATIONMEASURABLEINFORMATION, DefaultUserDestinationMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserDestinationMeasurableInformation from the ontology.
     */
    public Collection<? extends UserDestinationMeasurableInformation> getAllUserDestinationMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERDESTINATIONMEASURABLEINFORMATION, DefaultUserDestinationMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserDidArriveAtLocationMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserDidArriveAtLocationMeasurableInformation", UserDidArriveAtLocationMeasurableInformation.class, DefaultUserDidArriveAtLocationMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserDidArriveAtLocationMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserDidArriveAtLocationMeasurableInformation createUserDidArriveAtLocationMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERDIDARRIVEATLOCATIONMEASURABLEINFORMATION, DefaultUserDidArriveAtLocationMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserDidArriveAtLocationMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserDidArriveAtLocationMeasurableInformation getUserDidArriveAtLocationMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERDIDARRIVEATLOCATIONMEASURABLEINFORMATION, DefaultUserDidArriveAtLocationMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserDidArriveAtLocationMeasurableInformation from the ontology.
     */
    public Collection<? extends UserDidArriveAtLocationMeasurableInformation> getAllUserDidArriveAtLocationMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERDIDARRIVEATLOCATIONMEASURABLEINFORMATION, DefaultUserDidArriveAtLocationMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserDidLeaveLocationMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserDidLeaveLocationMeasurableInformation", UserDidLeaveLocationMeasurableInformation.class, DefaultUserDidLeaveLocationMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserDidLeaveLocationMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserDidLeaveLocationMeasurableInformation createUserDidLeaveLocationMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERDIDLEAVELOCATIONMEASURABLEINFORMATION, DefaultUserDidLeaveLocationMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserDidLeaveLocationMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserDidLeaveLocationMeasurableInformation getUserDidLeaveLocationMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERDIDLEAVELOCATIONMEASURABLEINFORMATION, DefaultUserDidLeaveLocationMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserDidLeaveLocationMeasurableInformation from the ontology.
     */
    public Collection<? extends UserDidLeaveLocationMeasurableInformation> getAllUserDidLeaveLocationMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERDIDLEAVELOCATIONMEASURABLEINFORMATION, DefaultUserDidLeaveLocationMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserIsAtLocationMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserIsAtLocationMeasurableInformation", UserIsAtLocationMeasurableInformation.class, DefaultUserIsAtLocationMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserIsAtLocationMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserIsAtLocationMeasurableInformation createUserIsAtLocationMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERISATLOCATIONMEASURABLEINFORMATION, DefaultUserIsAtLocationMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserIsAtLocationMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserIsAtLocationMeasurableInformation getUserIsAtLocationMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERISATLOCATIONMEASURABLEINFORMATION, DefaultUserIsAtLocationMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserIsAtLocationMeasurableInformation from the ontology.
     */
    public Collection<? extends UserIsAtLocationMeasurableInformation> getAllUserIsAtLocationMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERISATLOCATIONMEASURABLEINFORMATION, DefaultUserIsAtLocationMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserLocationAddressMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserLocationAddressMeasurableInformation", UserLocationAddressMeasurableInformation.class, DefaultUserLocationAddressMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserLocationAddressMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserLocationAddressMeasurableInformation createUserLocationAddressMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERLOCATIONADDRESSMEASURABLEINFORMATION, DefaultUserLocationAddressMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserLocationAddressMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserLocationAddressMeasurableInformation getUserLocationAddressMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERLOCATIONADDRESSMEASURABLEINFORMATION, DefaultUserLocationAddressMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserLocationAddressMeasurableInformation from the ontology.
     */
    public Collection<? extends UserLocationAddressMeasurableInformation> getAllUserLocationAddressMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERLOCATIONADDRESSMEASURABLEINFORMATION, DefaultUserLocationAddressMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserLocationBuildingMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserLocationBuildingMeasurableInformation", UserLocationBuildingMeasurableInformation.class, DefaultUserLocationBuildingMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserLocationBuildingMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserLocationBuildingMeasurableInformation createUserLocationBuildingMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERLOCATIONBUILDINGMEASURABLEINFORMATION, DefaultUserLocationBuildingMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserLocationBuildingMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserLocationBuildingMeasurableInformation getUserLocationBuildingMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERLOCATIONBUILDINGMEASURABLEINFORMATION, DefaultUserLocationBuildingMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserLocationBuildingMeasurableInformation from the ontology.
     */
    public Collection<? extends UserLocationBuildingMeasurableInformation> getAllUserLocationBuildingMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERLOCATIONBUILDINGMEASURABLEINFORMATION, DefaultUserLocationBuildingMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserLocationCountryMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserLocationCountryMeasurableInformation", UserLocationCountryMeasurableInformation.class, DefaultUserLocationCountryMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserLocationCountryMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserLocationCountryMeasurableInformation createUserLocationCountryMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERLOCATIONCOUNTRYMEASURABLEINFORMATION, DefaultUserLocationCountryMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserLocationCountryMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserLocationCountryMeasurableInformation getUserLocationCountryMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERLOCATIONCOUNTRYMEASURABLEINFORMATION, DefaultUserLocationCountryMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserLocationCountryMeasurableInformation from the ontology.
     */
    public Collection<? extends UserLocationCountryMeasurableInformation> getAllUserLocationCountryMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERLOCATIONCOUNTRYMEASURABLEINFORMATION, DefaultUserLocationCountryMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserLocationDistanceMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserLocationDistanceMeasurableInformation", UserLocationDistanceMeasurableInformation.class, DefaultUserLocationDistanceMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserLocationDistanceMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserLocationDistanceMeasurableInformation createUserLocationDistanceMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERLOCATIONDISTANCEMEASURABLEINFORMATION, DefaultUserLocationDistanceMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserLocationDistanceMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserLocationDistanceMeasurableInformation getUserLocationDistanceMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERLOCATIONDISTANCEMEASURABLEINFORMATION, DefaultUserLocationDistanceMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserLocationDistanceMeasurableInformation from the ontology.
     */
    public Collection<? extends UserLocationDistanceMeasurableInformation> getAllUserLocationDistanceMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERLOCATIONDISTANCEMEASURABLEINFORMATION, DefaultUserLocationDistanceMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserLocationLatitudeMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserLocationLatitudeMeasurableInformation", UserLocationLatitudeMeasurableInformation.class, DefaultUserLocationLatitudeMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserLocationLatitudeMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserLocationLatitudeMeasurableInformation createUserLocationLatitudeMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERLOCATIONLATITUDEMEASURABLEINFORMATION, DefaultUserLocationLatitudeMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserLocationLatitudeMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserLocationLatitudeMeasurableInformation getUserLocationLatitudeMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERLOCATIONLATITUDEMEASURABLEINFORMATION, DefaultUserLocationLatitudeMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserLocationLatitudeMeasurableInformation from the ontology.
     */
    public Collection<? extends UserLocationLatitudeMeasurableInformation> getAllUserLocationLatitudeMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERLOCATIONLATITUDEMEASURABLEINFORMATION, DefaultUserLocationLatitudeMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserLocationLongitudeMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserLocationLongitudeMeasurableInformation", UserLocationLongitudeMeasurableInformation.class, DefaultUserLocationLongitudeMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserLocationLongitudeMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserLocationLongitudeMeasurableInformation createUserLocationLongitudeMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERLOCATIONLONGITUDEMEASURABLEINFORMATION, DefaultUserLocationLongitudeMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserLocationLongitudeMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserLocationLongitudeMeasurableInformation getUserLocationLongitudeMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERLOCATIONLONGITUDEMEASURABLEINFORMATION, DefaultUserLocationLongitudeMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserLocationLongitudeMeasurableInformation from the ontology.
     */
    public Collection<? extends UserLocationLongitudeMeasurableInformation> getAllUserLocationLongitudeMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERLOCATIONLONGITUDEMEASURABLEINFORMATION, DefaultUserLocationLongitudeMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserLocationRegionMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserLocationRegionMeasurableInformation", UserLocationRegionMeasurableInformation.class, DefaultUserLocationRegionMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserLocationRegionMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserLocationRegionMeasurableInformation createUserLocationRegionMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERLOCATIONREGIONMEASURABLEINFORMATION, DefaultUserLocationRegionMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserLocationRegionMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserLocationRegionMeasurableInformation getUserLocationRegionMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERLOCATIONREGIONMEASURABLEINFORMATION, DefaultUserLocationRegionMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserLocationRegionMeasurableInformation from the ontology.
     */
    public Collection<? extends UserLocationRegionMeasurableInformation> getAllUserLocationRegionMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERLOCATIONREGIONMEASURABLEINFORMATION, DefaultUserLocationRegionMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserMeansOfTransportationMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserMeansOfTransportationMeasurableInformation", UserMeansOfTransportationMeasurableInformation.class, DefaultUserMeansOfTransportationMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserMeansOfTransportationMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserMeansOfTransportationMeasurableInformation createUserMeansOfTransportationMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERMEANSOFTRANSPORTATIONMEASURABLEINFORMATION, DefaultUserMeansOfTransportationMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserMeansOfTransportationMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserMeansOfTransportationMeasurableInformation getUserMeansOfTransportationMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERMEANSOFTRANSPORTATIONMEASURABLEINFORMATION, DefaultUserMeansOfTransportationMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserMeansOfTransportationMeasurableInformation from the ontology.
     */
    public Collection<? extends UserMeansOfTransportationMeasurableInformation> getAllUserMeansOfTransportationMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERMEANSOFTRANSPORTATIONMEASURABLEINFORMATION, DefaultUserMeansOfTransportationMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserMovementSpeedMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserMovementSpeedMeasurableInformation", UserMovementSpeedMeasurableInformation.class, DefaultUserMovementSpeedMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserMovementSpeedMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserMovementSpeedMeasurableInformation createUserMovementSpeedMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERMOVEMENTSPEEDMEASURABLEINFORMATION, DefaultUserMovementSpeedMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserMovementSpeedMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserMovementSpeedMeasurableInformation getUserMovementSpeedMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERMOVEMENTSPEEDMEASURABLEINFORMATION, DefaultUserMovementSpeedMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserMovementSpeedMeasurableInformation from the ontology.
     */
    public Collection<? extends UserMovementSpeedMeasurableInformation> getAllUserMovementSpeedMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERMOVEMENTSPEEDMEASURABLEINFORMATION, DefaultUserMovementSpeedMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserRoleMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserRoleMeasurableInformation", UserRoleMeasurableInformation.class, DefaultUserRoleMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserRoleMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserRoleMeasurableInformation createUserRoleMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERROLEMEASURABLEINFORMATION, DefaultUserRoleMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserRoleMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserRoleMeasurableInformation getUserRoleMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERROLEMEASURABLEINFORMATION, DefaultUserRoleMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserRoleMeasurableInformation from the ontology.
     */
    public Collection<? extends UserRoleMeasurableInformation> getAllUserRoleMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERROLEMEASURABLEINFORMATION, DefaultUserRoleMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindAngerMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindAngerMeasurableInformation", UserStateOfMindAngerMeasurableInformation.class, DefaultUserStateOfMindAngerMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserStateOfMindAngerMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserStateOfMindAngerMeasurableInformation createUserStateOfMindAngerMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDANGERMEASURABLEINFORMATION, DefaultUserStateOfMindAngerMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserStateOfMindAngerMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserStateOfMindAngerMeasurableInformation getUserStateOfMindAngerMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDANGERMEASURABLEINFORMATION, DefaultUserStateOfMindAngerMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserStateOfMindAngerMeasurableInformation from the ontology.
     */
    public Collection<? extends UserStateOfMindAngerMeasurableInformation> getAllUserStateOfMindAngerMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERSTATEOFMINDANGERMEASURABLEINFORMATION, DefaultUserStateOfMindAngerMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindBoredomMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindBoredomMeasurableInformation", UserStateOfMindBoredomMeasurableInformation.class, DefaultUserStateOfMindBoredomMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserStateOfMindBoredomMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserStateOfMindBoredomMeasurableInformation createUserStateOfMindBoredomMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDBOREDOMMEASURABLEINFORMATION, DefaultUserStateOfMindBoredomMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserStateOfMindBoredomMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserStateOfMindBoredomMeasurableInformation getUserStateOfMindBoredomMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDBOREDOMMEASURABLEINFORMATION, DefaultUserStateOfMindBoredomMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserStateOfMindBoredomMeasurableInformation from the ontology.
     */
    public Collection<? extends UserStateOfMindBoredomMeasurableInformation> getAllUserStateOfMindBoredomMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERSTATEOFMINDBOREDOMMEASURABLEINFORMATION, DefaultUserStateOfMindBoredomMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindConcentrationMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindConcentrationMeasurableInformation", UserStateOfMindConcentrationMeasurableInformation.class, DefaultUserStateOfMindConcentrationMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserStateOfMindConcentrationMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserStateOfMindConcentrationMeasurableInformation createUserStateOfMindConcentrationMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDCONCENTRATIONMEASURABLEINFORMATION, DefaultUserStateOfMindConcentrationMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserStateOfMindConcentrationMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserStateOfMindConcentrationMeasurableInformation getUserStateOfMindConcentrationMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDCONCENTRATIONMEASURABLEINFORMATION, DefaultUserStateOfMindConcentrationMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserStateOfMindConcentrationMeasurableInformation from the ontology.
     */
    public Collection<? extends UserStateOfMindConcentrationMeasurableInformation> getAllUserStateOfMindConcentrationMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERSTATEOFMINDCONCENTRATIONMEASURABLEINFORMATION, DefaultUserStateOfMindConcentrationMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindConfusionMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindConfusionMeasurableInformation", UserStateOfMindConfusionMeasurableInformation.class, DefaultUserStateOfMindConfusionMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserStateOfMindConfusionMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserStateOfMindConfusionMeasurableInformation createUserStateOfMindConfusionMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDCONFUSIONMEASURABLEINFORMATION, DefaultUserStateOfMindConfusionMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserStateOfMindConfusionMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserStateOfMindConfusionMeasurableInformation getUserStateOfMindConfusionMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDCONFUSIONMEASURABLEINFORMATION, DefaultUserStateOfMindConfusionMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserStateOfMindConfusionMeasurableInformation from the ontology.
     */
    public Collection<? extends UserStateOfMindConfusionMeasurableInformation> getAllUserStateOfMindConfusionMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERSTATEOFMINDCONFUSIONMEASURABLEINFORMATION, DefaultUserStateOfMindConfusionMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindCuriosityMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindCuriosityMeasurableInformation", UserStateOfMindCuriosityMeasurableInformation.class, DefaultUserStateOfMindCuriosityMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserStateOfMindCuriosityMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserStateOfMindCuriosityMeasurableInformation createUserStateOfMindCuriosityMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDCURIOSITYMEASURABLEINFORMATION, DefaultUserStateOfMindCuriosityMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserStateOfMindCuriosityMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserStateOfMindCuriosityMeasurableInformation getUserStateOfMindCuriosityMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDCURIOSITYMEASURABLEINFORMATION, DefaultUserStateOfMindCuriosityMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserStateOfMindCuriosityMeasurableInformation from the ontology.
     */
    public Collection<? extends UserStateOfMindCuriosityMeasurableInformation> getAllUserStateOfMindCuriosityMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERSTATEOFMINDCURIOSITYMEASURABLEINFORMATION, DefaultUserStateOfMindCuriosityMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindDistractionMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindDistractionMeasurableInformation", UserStateOfMindDistractionMeasurableInformation.class, DefaultUserStateOfMindDistractionMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserStateOfMindDistractionMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserStateOfMindDistractionMeasurableInformation createUserStateOfMindDistractionMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDDISTRACTIONMEASURABLEINFORMATION, DefaultUserStateOfMindDistractionMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserStateOfMindDistractionMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserStateOfMindDistractionMeasurableInformation getUserStateOfMindDistractionMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDDISTRACTIONMEASURABLEINFORMATION, DefaultUserStateOfMindDistractionMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserStateOfMindDistractionMeasurableInformation from the ontology.
     */
    public Collection<? extends UserStateOfMindDistractionMeasurableInformation> getAllUserStateOfMindDistractionMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERSTATEOFMINDDISTRACTIONMEASURABLEINFORMATION, DefaultUserStateOfMindDistractionMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindHappinessMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindHappinessMeasurableInformation", UserStateOfMindHappinessMeasurableInformation.class, DefaultUserStateOfMindHappinessMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserStateOfMindHappinessMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserStateOfMindHappinessMeasurableInformation createUserStateOfMindHappinessMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDHAPPINESSMEASURABLEINFORMATION, DefaultUserStateOfMindHappinessMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserStateOfMindHappinessMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserStateOfMindHappinessMeasurableInformation getUserStateOfMindHappinessMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDHAPPINESSMEASURABLEINFORMATION, DefaultUserStateOfMindHappinessMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserStateOfMindHappinessMeasurableInformation from the ontology.
     */
    public Collection<? extends UserStateOfMindHappinessMeasurableInformation> getAllUserStateOfMindHappinessMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERSTATEOFMINDHAPPINESSMEASURABLEINFORMATION, DefaultUserStateOfMindHappinessMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindOptimismMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindOptimismMeasurableInformation", UserStateOfMindOptimismMeasurableInformation.class, DefaultUserStateOfMindOptimismMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserStateOfMindOptimismMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserStateOfMindOptimismMeasurableInformation createUserStateOfMindOptimismMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDOPTIMISMMEASURABLEINFORMATION, DefaultUserStateOfMindOptimismMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserStateOfMindOptimismMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserStateOfMindOptimismMeasurableInformation getUserStateOfMindOptimismMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDOPTIMISMMEASURABLEINFORMATION, DefaultUserStateOfMindOptimismMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserStateOfMindOptimismMeasurableInformation from the ontology.
     */
    public Collection<? extends UserStateOfMindOptimismMeasurableInformation> getAllUserStateOfMindOptimismMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERSTATEOFMINDOPTIMISMMEASURABLEINFORMATION, DefaultUserStateOfMindOptimismMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindSadnessMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindSadnessMeasurableInformation", UserStateOfMindSadnessMeasurableInformation.class, DefaultUserStateOfMindSadnessMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserStateOfMindSadnessMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserStateOfMindSadnessMeasurableInformation createUserStateOfMindSadnessMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDSADNESSMEASURABLEINFORMATION, DefaultUserStateOfMindSadnessMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserStateOfMindSadnessMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserStateOfMindSadnessMeasurableInformation getUserStateOfMindSadnessMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDSADNESSMEASURABLEINFORMATION, DefaultUserStateOfMindSadnessMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserStateOfMindSadnessMeasurableInformation from the ontology.
     */
    public Collection<? extends UserStateOfMindSadnessMeasurableInformation> getAllUserStateOfMindSadnessMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERSTATEOFMINDSADNESSMEASURABLEINFORMATION, DefaultUserStateOfMindSadnessMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindTirednessMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#UserStateOfMindTirednessMeasurableInformation", UserStateOfMindTirednessMeasurableInformation.class, DefaultUserStateOfMindTirednessMeasurableInformation.class);
    }

    /**
     * Creates an instance of type UserStateOfMindTirednessMeasurableInformation.  Modifies the underlying ontology.
     */
    public UserStateOfMindTirednessMeasurableInformation createUserStateOfMindTirednessMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDTIREDNESSMEASURABLEINFORMATION, DefaultUserStateOfMindTirednessMeasurableInformation.class);
    }

    /**
     * Gets an instance of type UserStateOfMindTirednessMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public UserStateOfMindTirednessMeasurableInformation getUserStateOfMindTirednessMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERSTATEOFMINDTIREDNESSMEASURABLEINFORMATION, DefaultUserStateOfMindTirednessMeasurableInformation.class);
    }

    /**
     * Gets all instances of UserStateOfMindTirednessMeasurableInformation from the ontology.
     */
    public Collection<? extends UserStateOfMindTirednessMeasurableInformation> getAllUserStateOfMindTirednessMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERSTATEOFMINDTIREDNESSMEASURABLEINFORMATION, DefaultUserStateOfMindTirednessMeasurableInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#VelocityUnitContextParameter
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#VelocityUnitContextParameter", VelocityUnitContextParameter.class, DefaultVelocityUnitContextParameter.class);
    }

    /**
     * Creates an instance of type VelocityUnitContextParameter.  Modifies the underlying ontology.
     */
    public VelocityUnitContextParameter createVelocityUnitContextParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VELOCITYUNITCONTEXTPARAMETER, DefaultVelocityUnitContextParameter.class);
    }

    /**
     * Gets an instance of type VelocityUnitContextParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VelocityUnitContextParameter getVelocityUnitContextParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VELOCITYUNITCONTEXTPARAMETER, DefaultVelocityUnitContextParameter.class);
    }

    /**
     * Gets all instances of VelocityUnitContextParameter from the ontology.
     */
    public Collection<? extends VelocityUnitContextParameter> getAllVelocityUnitContextParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VELOCITYUNITCONTEXTPARAMETER, DefaultVelocityUnitContextParameter.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#VideoCameraAvailableMeasurableInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#VideoCameraAvailableMeasurableInformation", VideoCameraAvailableMeasurableInformation.class, DefaultVideoCameraAvailableMeasurableInformation.class);
    }

    /**
     * Creates an instance of type VideoCameraAvailableMeasurableInformation.  Modifies the underlying ontology.
     */
    public VideoCameraAvailableMeasurableInformation createVideoCameraAvailableMeasurableInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VIDEOCAMERAAVAILABLEMEASURABLEINFORMATION, DefaultVideoCameraAvailableMeasurableInformation.class);
    }

    /**
     * Gets an instance of type VideoCameraAvailableMeasurableInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VideoCameraAvailableMeasurableInformation getVideoCameraAvailableMeasurableInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VIDEOCAMERAAVAILABLEMEASURABLEINFORMATION, DefaultVideoCameraAvailableMeasurableInformation.class);
    }

    /**
     * Gets all instances of VideoCameraAvailableMeasurableInformation from the ontology.
     */
    public Collection<? extends VideoCameraAvailableMeasurableInformation> getAllVideoCameraAvailableMeasurableInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VIDEOCAMERAAVAILABLEMEASURABLEINFORMATION, DefaultVideoCameraAvailableMeasurableInformation.class);
    }


}
