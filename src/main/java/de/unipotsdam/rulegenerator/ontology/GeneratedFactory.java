package de.unipotsdam.rulegenerator.ontology;

import de.unipotsdam.rulegenerator.ontology.impl.*;

import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: GeneratedFactory<br>
 * @version generated on Wed Oct 07 15:25:17 CEST 2015 by tobias
 */
public class GeneratedFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    protected FactoryHelper delegate;
    private CodeGenerationInference inference;

    public GeneratedFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public GeneratedFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#Constraint
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#Constraint", Constraint.class, DefaultConstraint.class);
    }

    /**
     * Creates an instance of type Constraint.  Modifies the underlying ontology.
     */
    public Constraint createConstraint(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONSTRAINT, DefaultConstraint.class);
    }

    /**
     * Gets an instance of type Constraint with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Constraint getConstraint(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONSTRAINT, DefaultConstraint.class);
    }

    /**
     * Gets all instances of Constraint from the ontology.
     */
    public Collection<? extends Constraint> getAllConstraintInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONSTRAINT, DefaultConstraint.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ConstraintRequirement
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ConstraintRequirement", ConstraintRequirement.class, DefaultConstraintRequirement.class);
    }

    /**
     * Creates an instance of type ConstraintRequirement.  Modifies the underlying ontology.
     */
    public ConstraintRequirement createConstraintRequirement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONSTRAINTREQUIREMENT, DefaultConstraintRequirement.class);
    }

    /**
     * Gets an instance of type ConstraintRequirement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ConstraintRequirement getConstraintRequirement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONSTRAINTREQUIREMENT, DefaultConstraintRequirement.class);
    }

    /**
     * Gets all instances of ConstraintRequirement from the ontology.
     */
    public Collection<? extends ConstraintRequirement> getAllConstraintRequirementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONSTRAINTREQUIREMENT, DefaultConstraintRequirement.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ContextClass
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ContextClass", ContextClass.class, DefaultContextClass.class);
    }

    /**
     * Creates an instance of type ContextClass.  Modifies the underlying ontology.
     */
    public ContextClass createContextClass(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONTEXTCLASS, DefaultContextClass.class);
    }

    /**
     * Gets an instance of type ContextClass with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ContextClass getContextClass(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONTEXTCLASS, DefaultContextClass.class);
    }

    /**
     * Gets all instances of ContextClass from the ontology.
     */
    public Collection<? extends ContextClass> getAllContextClassInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONTEXTCLASS, DefaultContextClass.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ContextInformation", ContextInformation.class, DefaultContextInformation.class);
    }

    /**
     * Creates an instance of type ContextInformation.  Modifies the underlying ontology.
     */
    public ContextInformation createContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONTEXTINFORMATION, DefaultContextInformation.class);
    }

    /**
     * Gets an instance of type ContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ContextInformation getContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONTEXTINFORMATION, DefaultContextInformation.class);
    }

    /**
     * Gets all instances of ContextInformation from the ontology.
     */
    public Collection<? extends ContextInformation> getAllContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONTEXTINFORMATION, DefaultContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ContextInformationConstraintRequirement
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ContextInformationConstraintRequirement", ContextInformationConstraintRequirement.class, DefaultContextInformationConstraintRequirement.class);
    }

    /**
     * Creates an instance of type ContextInformationConstraintRequirement.  Modifies the underlying ontology.
     */
    public ContextInformationConstraintRequirement createContextInformationConstraintRequirement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONTEXTINFORMATIONCONSTRAINTREQUIREMENT, DefaultContextInformationConstraintRequirement.class);
    }

    /**
     * Gets an instance of type ContextInformationConstraintRequirement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ContextInformationConstraintRequirement getContextInformationConstraintRequirement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONTEXTINFORMATIONCONSTRAINTREQUIREMENT, DefaultContextInformationConstraintRequirement.class);
    }

    /**
     * Gets all instances of ContextInformationConstraintRequirement from the ontology.
     */
    public Collection<? extends ContextInformationConstraintRequirement> getAllContextInformationConstraintRequirementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONTEXTINFORMATIONCONSTRAINTREQUIREMENT, DefaultContextInformationConstraintRequirement.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ContextInformationParameter
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ContextInformationParameter", ContextInformationParameter.class, DefaultContextInformationParameter.class);
    }

    /**
     * Creates an instance of type ContextInformationParameter.  Modifies the underlying ontology.
     */
    public ContextInformationParameter createContextInformationParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONTEXTINFORMATIONPARAMETER, DefaultContextInformationParameter.class);
    }

    /**
     * Gets an instance of type ContextInformationParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ContextInformationParameter getContextInformationParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONTEXTINFORMATIONPARAMETER, DefaultContextInformationParameter.class);
    }

    /**
     * Gets all instances of ContextInformationParameter from the ontology.
     */
    public Collection<? extends ContextInformationParameter> getAllContextInformationParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONTEXTINFORMATIONPARAMETER, DefaultContextInformationParameter.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#Feature
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#Feature", Feature.class, DefaultFeature.class);
    }

    /**
     * Creates an instance of type Feature.  Modifies the underlying ontology.
     */
    public Feature createFeature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FEATURE, DefaultFeature.class);
    }

    /**
     * Gets an instance of type Feature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Feature getFeature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FEATURE, DefaultFeature.class);
    }

    /**
     * Gets all instances of Feature from the ontology.
     */
    public Collection<? extends Feature> getAllFeatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FEATURE, DefaultFeature.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#LearningUnit
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#LearningUnit", LearningUnit.class, DefaultLearningUnit.class);
    }

    /**
     * Creates an instance of type LearningUnit.  Modifies the underlying ontology.
     */
    public LearningUnit createLearningUnit(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LEARNINGUNIT, DefaultLearningUnit.class);
    }

    /**
     * Gets an instance of type LearningUnit with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LearningUnit getLearningUnit(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LEARNINGUNIT, DefaultLearningUnit.class);
    }

    /**
     * Gets all instances of LearningUnit from the ontology.
     */
    public Collection<? extends LearningUnit> getAllLearningUnitInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LEARNINGUNIT, DefaultLearningUnit.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#LearningUnitClass
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#LearningUnitClass", LearningUnitClass.class, DefaultLearningUnitClass.class);
    }

    /**
     * Creates an instance of type LearningUnitClass.  Modifies the underlying ontology.
     */
    public LearningUnitClass createLearningUnitClass(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LEARNINGUNITCLASS, DefaultLearningUnitClass.class);
    }

    /**
     * Gets an instance of type LearningUnitClass with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LearningUnitClass getLearningUnitClass(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LEARNINGUNITCLASS, DefaultLearningUnitClass.class);
    }

    /**
     * Gets all instances of LearningUnitClass from the ontology.
     */
    public Collection<? extends LearningUnitClass> getAllLearningUnitClassInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LEARNINGUNITCLASS, DefaultLearningUnitClass.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#LearningUnitClassConstraint
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#LearningUnitClassConstraint", LearningUnitClassConstraint.class, DefaultLearningUnitClassConstraint.class);
    }

    /**
     * Creates an instance of type LearningUnitClassConstraint.  Modifies the underlying ontology.
     */
    public LearningUnitClassConstraint createLearningUnitClassConstraint(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LEARNINGUNITCLASSCONSTRAINT, DefaultLearningUnitClassConstraint.class);
    }

    /**
     * Gets an instance of type LearningUnitClassConstraint with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LearningUnitClassConstraint getLearningUnitClassConstraint(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LEARNINGUNITCLASSCONSTRAINT, DefaultLearningUnitClassConstraint.class);
    }

    /**
     * Gets all instances of LearningUnitClassConstraint from the ontology.
     */
    public Collection<? extends LearningUnitClassConstraint> getAllLearningUnitClassConstraintInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LEARNINGUNITCLASSCONSTRAINT, DefaultLearningUnitClassConstraint.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#LocationContext
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#LocationContext", LocationContext.class, DefaultLocationContext.class);
    }

    /**
     * Creates an instance of type LocationContext.  Modifies the underlying ontology.
     */
    public LocationContext createLocationContext(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LOCATIONCONTEXT, DefaultLocationContext.class);
    }

    /**
     * Gets an instance of type LocationContext with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LocationContext getLocationContext(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LOCATIONCONTEXT, DefaultLocationContext.class);
    }

    /**
     * Gets all instances of LocationContext from the ontology.
     */
    public Collection<? extends LocationContext> getAllLocationContextInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LOCATIONCONTEXT, DefaultLocationContext.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#LocationContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#LocationContextInformation", LocationContextInformation.class, DefaultLocationContextInformation.class);
    }

    /**
     * Creates an instance of type LocationContextInformation.  Modifies the underlying ontology.
     */
    public LocationContextInformation createLocationContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LOCATIONCONTEXTINFORMATION, DefaultLocationContextInformation.class);
    }

    /**
     * Gets an instance of type LocationContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LocationContextInformation getLocationContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LOCATIONCONTEXTINFORMATION, DefaultLocationContextInformation.class);
    }

    /**
     * Gets all instances of LocationContextInformation from the ontology.
     */
    public Collection<? extends LocationContextInformation> getAllLocationContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LOCATIONCONTEXTINFORMATION, DefaultLocationContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#MixedContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#MixedContextInformation", MixedContextInformation.class, DefaultMixedContextInformation.class);
    }

    /**
     * Creates an instance of type MixedContextInformation.  Modifies the underlying ontology.
     */
    public MixedContextInformation createMixedContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MIXEDCONTEXTINFORMATION, DefaultMixedContextInformation.class);
    }

    /**
     * Gets an instance of type MixedContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MixedContextInformation getMixedContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MIXEDCONTEXTINFORMATION, DefaultMixedContextInformation.class);
    }

    /**
     * Gets all instances of MixedContextInformation from the ontology.
     */
    public Collection<? extends MixedContextInformation> getAllMixedContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MIXEDCONTEXTINFORMATION, DefaultMixedContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ParameterizedContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ParameterizedContextInformation", ParameterizedContextInformation.class, DefaultParameterizedContextInformation.class);
    }

    /**
     * Creates an instance of type ParameterizedContextInformation.  Modifies the underlying ontology.
     */
    public ParameterizedContextInformation createParameterizedContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PARAMETERIZEDCONTEXTINFORMATION, DefaultParameterizedContextInformation.class);
    }

    /**
     * Gets an instance of type ParameterizedContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ParameterizedContextInformation getParameterizedContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PARAMETERIZEDCONTEXTINFORMATION, DefaultParameterizedContextInformation.class);
    }

    /**
     * Gets all instances of ParameterizedContextInformation from the ontology.
     */
    public Collection<? extends ParameterizedContextInformation> getAllParameterizedContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PARAMETERIZEDCONTEXTINFORMATION, DefaultParameterizedContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#PersonalContext
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#PersonalContext", PersonalContext.class, DefaultPersonalContext.class);
    }

    /**
     * Creates an instance of type PersonalContext.  Modifies the underlying ontology.
     */
    public PersonalContext createPersonalContext(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERSONALCONTEXT, DefaultPersonalContext.class);
    }

    /**
     * Gets an instance of type PersonalContext with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PersonalContext getPersonalContext(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERSONALCONTEXT, DefaultPersonalContext.class);
    }

    /**
     * Gets all instances of PersonalContext from the ontology.
     */
    public Collection<? extends PersonalContext> getAllPersonalContextInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERSONALCONTEXT, DefaultPersonalContext.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#PersonalContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#PersonalContextInformation", PersonalContextInformation.class, DefaultPersonalContextInformation.class);
    }

    /**
     * Creates an instance of type PersonalContextInformation.  Modifies the underlying ontology.
     */
    public PersonalContextInformation createPersonalContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERSONALCONTEXTINFORMATION, DefaultPersonalContextInformation.class);
    }

    /**
     * Gets an instance of type PersonalContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PersonalContextInformation getPersonalContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERSONALCONTEXTINFORMATION, DefaultPersonalContextInformation.class);
    }

    /**
     * Gets all instances of PersonalContextInformation from the ontology.
     */
    public Collection<? extends PersonalContextInformation> getAllPersonalContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERSONALCONTEXTINFORMATION, DefaultPersonalContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#PhysicalContext
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#PhysicalContext", PhysicalContext.class, DefaultPhysicalContext.class);
    }

    /**
     * Creates an instance of type PhysicalContext.  Modifies the underlying ontology.
     */
    public PhysicalContext createPhysicalContext(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PHYSICALCONTEXT, DefaultPhysicalContext.class);
    }

    /**
     * Gets an instance of type PhysicalContext with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PhysicalContext getPhysicalContext(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PHYSICALCONTEXT, DefaultPhysicalContext.class);
    }

    /**
     * Gets all instances of PhysicalContext from the ontology.
     */
    public Collection<? extends PhysicalContext> getAllPhysicalContextInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PHYSICALCONTEXT, DefaultPhysicalContext.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#PhysicalContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#PhysicalContextInformation", PhysicalContextInformation.class, DefaultPhysicalContextInformation.class);
    }

    /**
     * Creates an instance of type PhysicalContextInformation.  Modifies the underlying ontology.
     */
    public PhysicalContextInformation createPhysicalContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PHYSICALCONTEXTINFORMATION, DefaultPhysicalContextInformation.class);
    }

    /**
     * Gets an instance of type PhysicalContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PhysicalContextInformation getPhysicalContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PHYSICALCONTEXTINFORMATION, DefaultPhysicalContextInformation.class);
    }

    /**
     * Gets all instances of PhysicalContextInformation from the ontology.
     */
    public Collection<? extends PhysicalContextInformation> getAllPhysicalContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PHYSICALCONTEXTINFORMATION, DefaultPhysicalContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#RankingConstraintRequirement
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#RankingConstraintRequirement", RankingConstraintRequirement.class, DefaultRankingConstraintRequirement.class);
    }

    /**
     * Creates an instance of type RankingConstraintRequirement.  Modifies the underlying ontology.
     */
    public RankingConstraintRequirement createRankingConstraintRequirement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RANKINGCONSTRAINTREQUIREMENT, DefaultRankingConstraintRequirement.class);
    }

    /**
     * Gets an instance of type RankingConstraintRequirement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RankingConstraintRequirement getRankingConstraintRequirement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RANKINGCONSTRAINTREQUIREMENT, DefaultRankingConstraintRequirement.class);
    }

    /**
     * Gets all instances of RankingConstraintRequirement from the ontology.
     */
    public Collection<? extends RankingConstraintRequirement> getAllRankingConstraintRequirementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RANKINGCONSTRAINTREQUIREMENT, DefaultRankingConstraintRequirement.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#Reason
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#Reason", Reason.class, DefaultReason.class);
    }

    /**
     * Creates an instance of type Reason.  Modifies the underlying ontology.
     */
    public Reason createReason(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REASON, DefaultReason.class);
    }

    /**
     * Gets an instance of type Reason with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Reason getReason(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REASON, DefaultReason.class);
    }

    /**
     * Gets all instances of Reason from the ontology.
     */
    public Collection<? extends Reason> getAllReasonInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REASON, DefaultReason.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#RecordedContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#RecordedContextInformation", RecordedContextInformation.class, DefaultRecordedContextInformation.class);
    }

    /**
     * Creates an instance of type RecordedContextInformation.  Modifies the underlying ontology.
     */
    public RecordedContextInformation createRecordedContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RECORDEDCONTEXTINFORMATION, DefaultRecordedContextInformation.class);
    }

    /**
     * Gets an instance of type RecordedContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RecordedContextInformation getRecordedContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RECORDEDCONTEXTINFORMATION, DefaultRecordedContextInformation.class);
    }

    /**
     * Gets all instances of RecordedContextInformation from the ontology.
     */
    public Collection<? extends RecordedContextInformation> getAllRecordedContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RECORDEDCONTEXTINFORMATION, DefaultRecordedContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#RestrictFeatureConstraint
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#RestrictFeatureConstraint", RestrictFeatureConstraint.class, DefaultRestrictFeatureConstraint.class);
    }

    /**
     * Creates an instance of type RestrictFeatureConstraint.  Modifies the underlying ontology.
     */
    public RestrictFeatureConstraint createRestrictFeatureConstraint(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RESTRICTFEATURECONSTRAINT, DefaultRestrictFeatureConstraint.class);
    }

    /**
     * Gets an instance of type RestrictFeatureConstraint with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RestrictFeatureConstraint getRestrictFeatureConstraint(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RESTRICTFEATURECONSTRAINT, DefaultRestrictFeatureConstraint.class);
    }

    /**
     * Gets all instances of RestrictFeatureConstraint from the ontology.
     */
    public Collection<? extends RestrictFeatureConstraint> getAllRestrictFeatureConstraintInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RESTRICTFEATURECONSTRAINT, DefaultRestrictFeatureConstraint.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ScenarioContext
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ScenarioContext", ScenarioContext.class, DefaultScenarioContext.class);
    }

    /**
     * Creates an instance of type ScenarioContext.  Modifies the underlying ontology.
     */
    public ScenarioContext createScenarioContext(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCENARIOCONTEXT, DefaultScenarioContext.class);
    }

    /**
     * Gets an instance of type ScenarioContext with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ScenarioContext getScenarioContext(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCENARIOCONTEXT, DefaultScenarioContext.class);
    }

    /**
     * Gets all instances of ScenarioContext from the ontology.
     */
    public Collection<? extends ScenarioContext> getAllScenarioContextInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCENARIOCONTEXT, DefaultScenarioContext.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#ScenarioContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#ScenarioContextInformation", ScenarioContextInformation.class, DefaultScenarioContextInformation.class);
    }

    /**
     * Creates an instance of type ScenarioContextInformation.  Modifies the underlying ontology.
     */
    public ScenarioContextInformation createScenarioContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCENARIOCONTEXTINFORMATION, DefaultScenarioContextInformation.class);
    }

    /**
     * Gets an instance of type ScenarioContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ScenarioContextInformation getScenarioContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCENARIOCONTEXTINFORMATION, DefaultScenarioContextInformation.class);
    }

    /**
     * Gets all instances of ScenarioContextInformation from the ontology.
     */
    public Collection<? extends ScenarioContextInformation> getAllScenarioContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCENARIOCONTEXTINFORMATION, DefaultScenarioContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#Situation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#Situation", Situation.class, DefaultSituation.class);
    }

    /**
     * Creates an instance of type Situation.  Modifies the underlying ontology.
     */
    public Situation createSituation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SITUATION, DefaultSituation.class);
    }

    /**
     * Gets an instance of type Situation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Situation getSituation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SITUATION, DefaultSituation.class);
    }

    /**
     * Gets all instances of Situation from the ontology.
     */
    public Collection<? extends Situation> getAllSituationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SITUATION, DefaultSituation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#SituationalContext
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#SituationalContext", SituationalContext.class, DefaultSituationalContext.class);
    }

    /**
     * Creates an instance of type SituationalContext.  Modifies the underlying ontology.
     */
    public SituationalContext createSituationalContext(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SITUATIONALCONTEXT, DefaultSituationalContext.class);
    }

    /**
     * Gets an instance of type SituationalContext with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SituationalContext getSituationalContext(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SITUATIONALCONTEXT, DefaultSituationalContext.class);
    }

    /**
     * Gets all instances of SituationalContext from the ontology.
     */
    public Collection<? extends SituationalContext> getAllSituationalContextInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SITUATIONALCONTEXT, DefaultSituationalContext.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#SituationalContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#SituationalContextInformation", SituationalContextInformation.class, DefaultSituationalContextInformation.class);
    }

    /**
     * Creates an instance of type SituationalContextInformation.  Modifies the underlying ontology.
     */
    public SituationalContextInformation createSituationalContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SITUATIONALCONTEXTINFORMATION, DefaultSituationalContextInformation.class);
    }

    /**
     * Gets an instance of type SituationalContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SituationalContextInformation getSituationalContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SITUATIONALCONTEXTINFORMATION, DefaultSituationalContextInformation.class);
    }

    /**
     * Gets all instances of SituationalContextInformation from the ontology.
     */
    public Collection<? extends SituationalContextInformation> getAllSituationalContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SITUATIONALCONTEXTINFORMATION, DefaultSituationalContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#TechnicalContext
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#TechnicalContext", TechnicalContext.class, DefaultTechnicalContext.class);
    }

    /**
     * Creates an instance of type TechnicalContext.  Modifies the underlying ontology.
     */
    public TechnicalContext createTechnicalContext(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TECHNICALCONTEXT, DefaultTechnicalContext.class);
    }

    /**
     * Gets an instance of type TechnicalContext with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TechnicalContext getTechnicalContext(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TECHNICALCONTEXT, DefaultTechnicalContext.class);
    }

    /**
     * Gets all instances of TechnicalContext from the ontology.
     */
    public Collection<? extends TechnicalContext> getAllTechnicalContextInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TECHNICALCONTEXT, DefaultTechnicalContext.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#TechnicalContextInformation
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#TechnicalContextInformation", TechnicalContextInformation.class, DefaultTechnicalContextInformation.class);
    }

    /**
     * Creates an instance of type TechnicalContextInformation.  Modifies the underlying ontology.
     */
    public TechnicalContextInformation createTechnicalContextInformation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TECHNICALCONTEXTINFORMATION, DefaultTechnicalContextInformation.class);
    }

    /**
     * Gets an instance of type TechnicalContextInformation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TechnicalContextInformation getTechnicalContextInformation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TECHNICALCONTEXTINFORMATION, DefaultTechnicalContextInformation.class);
    }

    /**
     * Gets all instances of TechnicalContextInformation from the ontology.
     */
    public Collection<? extends TechnicalContextInformation> getAllTechnicalContextInformationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TECHNICALCONTEXTINFORMATION, DefaultTechnicalContextInformation.class);
    }


    /* ***************************************************
     * Class http://motivate-project.de/ontology/knowledge.owl#User
     */

    {
        javaMapping.add("http://motivate-project.de/ontology/knowledge.owl#User", User.class, DefaultUser.class);
    }

    /**
     * Creates an instance of type User.  Modifies the underlying ontology.
     */
    public User createUser(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USER, DefaultUser.class);
    }

    /**
     * Gets an instance of type User with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public User getUser(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USER, DefaultUser.class);
    }

    /**
     * Gets all instances of User from the ontology.
     */
    public Collection<? extends User> getAllUserInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USER, DefaultUser.class);
    }


}
