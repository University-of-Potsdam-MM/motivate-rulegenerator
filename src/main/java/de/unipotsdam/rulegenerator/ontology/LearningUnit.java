package de.unipotsdam.rulegenerator.ontology;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: LearningUnit <br>
 * @version generated on Thu Dec 04 13:00:54 CET 2014 by tobias
 */

public interface LearningUnit extends WrappedIndividual {

    /* ***************************************************
     * Property http://motivate-project.de/ontology/knowledge.owl#hasAlternative
     */
     
    /**
     * Gets all property values for the hasAlternative property.<p>
     * 
     * @returns a collection of values for the hasAlternative property.
     */
    Collection<? extends WrappedIndividual> getHasAlternative();

    /**
     * Checks if the class has a hasAlternative property value.<p>
     * 
     * @return true if there is a hasAlternative property value.
     */
    boolean hasHasAlternative();

    /**
     * Adds a hasAlternative property value.<p>
     * 
     * @param newHasAlternative the hasAlternative property value to be added
     */
    void addHasAlternative(WrappedIndividual newHasAlternative);

    /**
     * Removes a hasAlternative property value.<p>
     * 
     * @param oldHasAlternative the hasAlternative property value to be removed.
     */
    void removeHasAlternative(WrappedIndividual oldHasAlternative);


    /* ***************************************************
     * Property http://motivate-project.de/ontology/knowledge.owl#hasContextInformation
     */
     
    /**
     * Gets all property values for the hasContextInformation property.<p>
     * 
     * @returns a collection of values for the hasContextInformation property.
     */
    Collection<? extends WrappedIndividual> getHasContextInformation();

    /**
     * Checks if the class has a hasContextInformation property value.<p>
     * 
     * @return true if there is a hasContextInformation property value.
     */
    boolean hasHasContextInformation();

    /**
     * Adds a hasContextInformation property value.<p>
     * 
     * @param newHasContextInformation the hasContextInformation property value to be added
     */
    void addHasContextInformation(WrappedIndividual newHasContextInformation);

    /**
     * Removes a hasContextInformation property value.<p>
     * 
     * @param oldHasContextInformation the hasContextInformation property value to be removed.
     */
    void removeHasContextInformation(WrappedIndividual oldHasContextInformation);


    /* ***************************************************
     * Property http://motivate-project.de/ontology/knowledge.owl#hasPrerequisite
     */
     
    /**
     * Gets all property values for the hasPrerequisite property.<p>
     * 
     * @returns a collection of values for the hasPrerequisite property.
     */
    Collection<? extends WrappedIndividual> getHasPrerequisite();

    /**
     * Checks if the class has a hasPrerequisite property value.<p>
     * 
     * @return true if there is a hasPrerequisite property value.
     */
    boolean hasHasPrerequisite();

    /**
     * Adds a hasPrerequisite property value.<p>
     * 
     * @param newHasPrerequisite the hasPrerequisite property value to be added
     */
    void addHasPrerequisite(WrappedIndividual newHasPrerequisite);

    /**
     * Removes a hasPrerequisite property value.<p>
     * 
     * @param oldHasPrerequisite the hasPrerequisite property value to be removed.
     */
    void removeHasPrerequisite(WrappedIndividual oldHasPrerequisite);


    /* ***************************************************
     * Property http://motivate-project.de/ontology/knowledge.owl#hasLID
     */
     
    /**
     * Gets all property values for the hasLID property.<p>
     * 
     * @returns a collection of values for the hasLID property.
     */
    Collection<? extends String> getHasLID();

    /**
     * Checks if the class has a hasLID property value.<p>
     * 
     * @return true if there is a hasLID property value.
     */
    boolean hasHasLID();

    /**
     * Adds a hasLID property value.<p>
     * 
     * @param newHasLID the hasLID property value to be added
     */
    void addHasLID(String newHasLID);

    /**
     * Removes a hasLID property value.<p>
     * 
     * @param oldHasLID the hasLID property value to be removed.
     */
    void removeHasLID(String oldHasLID);



    /* ***************************************************
     * Property http://motivate-project.de/ontology/knowledge.owl#hasSubject
     */
     
    /**
     * Gets all property values for the hasSubject property.<p>
     * 
     * @returns a collection of values for the hasSubject property.
     */
    Collection<? extends String> getHasSubject();

    /**
     * Checks if the class has a hasSubject property value.<p>
     * 
     * @return true if there is a hasSubject property value.
     */
    boolean hasHasSubject();

    /**
     * Adds a hasSubject property value.<p>
     * 
     * @param newHasSubject the hasSubject property value to be added
     */
    void addHasSubject(String newHasSubject);

    /**
     * Removes a hasSubject property value.<p>
     * 
     * @param oldHasSubject the hasSubject property value to be removed.
     */
    void removeHasSubject(String oldHasSubject);



    /* ***************************************************
     * Property http://motivate-project.de/ontology/knowledge.owl#hasTrigger
     */
     
    /**
     * Gets all property values for the hasTrigger property.<p>
     * 
     * @returns a collection of values for the hasTrigger property.
     */
    Collection<? extends Integer> getHasTrigger();

    /**
     * Checks if the class has a hasTrigger property value.<p>
     * 
     * @return true if there is a hasTrigger property value.
     */
    boolean hasHasTrigger();

    /**
     * Adds a hasTrigger property value.<p>
     * 
     * @param newHasTrigger the hasTrigger property value to be added
     */
    void addHasTrigger(Integer newHasTrigger);

    /**
     * Removes a hasTrigger property value.<p>
     * 
     * @param oldHasTrigger the hasTrigger property value to be removed.
     */
    void removeHasTrigger(Integer oldHasTrigger);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
