package de.unipotsdam.rulegenerator.ontology;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: FeatureConstraint <br>
 * @version generated on Mon Aug 18 12:20:09 CEST 2014 by tobias
 */

public interface FeatureConstraint extends Constraint {

    /* ***************************************************
     * Property http://www.motivate-project.de/ontologies/knowledge#hasFeature
     */
     
    /**
     * Gets all property values for the hasFeature property.<p>
     * 
     * @returns a collection of values for the hasFeature property.
     */
    Collection<? extends WrappedIndividual> getHasFeature();

    /**
     * Checks if the class has a hasFeature property value.<p>
     * 
     * @return true if there is a hasFeature property value.
     */
    boolean hasHasFeature();

    /**
     * Adds a hasFeature property value.<p>
     * 
     * @param newHasFeature the hasFeature property value to be added
     */
    void addHasFeature(WrappedIndividual newHasFeature);

    /**
     * Removes a hasFeature property value.<p>
     * 
     * @param oldHasFeature the hasFeature property value to be removed.
     */
    void removeHasFeature(WrappedIndividual oldHasFeature);


    /* ***************************************************
     * Property http://www.motivate-project.de/ontologies/knowledge#hasConstraintLogicalOperator
     */
     
    /**
     * Gets all property values for the hasConstraintLogicalOperator property.<p>
     * 
     * @returns a collection of values for the hasConstraintLogicalOperator property.
     */
    Collection<? extends Object> getHasConstraintLogicalOperator();

    /**
     * Checks if the class has a hasConstraintLogicalOperator property value.<p>
     * 
     * @return true if there is a hasConstraintLogicalOperator property value.
     */
    boolean hasHasConstraintLogicalOperator();

    /**
     * Adds a hasConstraintLogicalOperator property value.<p>
     * 
     * @param newHasConstraintLogicalOperator the hasConstraintLogicalOperator property value to be added
     */
    void addHasConstraintLogicalOperator(Object newHasConstraintLogicalOperator);

    /**
     * Removes a hasConstraintLogicalOperator property value.<p>
     * 
     * @param oldHasConstraintLogicalOperator the hasConstraintLogicalOperator property value to be removed.
     */
    void removeHasConstraintLogicalOperator(Object oldHasConstraintLogicalOperator);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
